<?xml version="1.0" encoding="UTF-8"?><unload unload_date="2021-05-19 14:54:12">
<sys_remote_update_set action="INSERT_OR_UPDATE">
<application display_value="YAML JSON Conversion">cbe7f1881b471854aed775561a4bcbc7</application>
<application_name>YAML JSON Conversion</application_name>
<application_scope>x_radi_yaml_json</application_scope>
<application_version>1.0.2</application_version>
<collisions/>
<commit_date/>
<deleted/>
<description> </description>
<inserted/>
<name>YAML JSON Conversion - 1.0.2</name>
<origin_sys_id/>
<parent display_value=""/>
<release_date/>
<remote_base_update_set display_value=""/>
<remote_parent_id/>
<remote_sys_id>54afca9cdb103c102ed422e64896197d</remote_sys_id>
<state>loaded</state>
<summary/>
<sys_class_name>sys_remote_update_set</sys_class_name>
<sys_created_by>jon@rapdev.io</sys_created_by>
<sys_created_on>2021-05-19 14:54:11</sys_created_on>
<sys_id>eccf469cdb103c102ed422e648961943</sys_id>
<sys_mod_count>0</sys_mod_count>
<sys_updated_by>jon@rapdev.io</sys_updated_by>
<sys_updated_on>2021-05-19 14:54:11</sys_updated_on>
<update_set display_value=""/>
<update_source display_value=""/>
<updated/>
</sys_remote_update_set>
<sys_update_xml action="INSERT_OR_UPDATE">
<action>INSERT_OR_UPDATE</action>
<application display_value="YAML JSON Conversion">cbe7f1881b471854aed775561a4bcbc7</application>
<category>customer</category>
<comments/>
<name>sys_scope_privilege_8a1af94c1b471854aed775561a4bcb73</name>
<payload><![CDATA[<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_scope_privilege"><sys_scope_privilege action="INSERT_OR_UPDATE"><operation>execute</operation><source_scope display_value="YAML JSON Conversion">cbe7f1881b471854aed775561a4bcbc7</source_scope><status>allowed</status><sys_class_name>sys_scope_privilege</sys_class_name><sys_created_by>jon</sys_created_by><sys_created_on>2020-08-30 19:11:24</sys_created_on><sys_id>8a1af94c1b471854aed775561a4bcb73</sys_id><sys_mod_count>0</sys_mod_count><sys_name>Glide API: string utilities</sys_name><sys_package display_value="YAML JSON Conversion" source="x_radi_yaml_json">cbe7f1881b471854aed775561a4bcbc7</sys_package><sys_policy/><sys_scope display_value="YAML JSON Conversion">cbe7f1881b471854aed775561a4bcbc7</sys_scope><sys_update_name>sys_scope_privilege_8a1af94c1b471854aed775561a4bcb73</sys_update_name><sys_updated_by>jon</sys_updated_by><sys_updated_on>2020-08-30 19:11:24</sys_updated_on><target_name>Glide API: string utilities</target_name><target_scope display_value="Global">global</target_scope><target_type>scriptable</target_type></sys_scope_privilege></record_update>]]></payload>
<payload_hash>-581563447</payload_hash>
<remote_update_set display_value="YAML JSON Conversion - 1.0.2">eccf469cdb103c102ed422e648961943</remote_update_set>
<replace_on_upgrade>false</replace_on_upgrade>
<sys_created_by>jon@rapdev.io</sys_created_by>
<sys_created_on>2021-05-19 14:54:11</sys_created_on>
<sys_id>20cf469cdb103c102ed422e648961946</sys_id>
<sys_mod_count>0</sys_mod_count>
<sys_recorded_at>179851e34800000001</sys_recorded_at>
<sys_updated_by>jon@rapdev.io</sys_updated_by>
<sys_updated_on>2021-05-19 14:54:11</sys_updated_on>
<table/>
<target_name>Glide API: string utilities</target_name>
<type>Cross scope privilege</type>
<update_domain>global</update_domain>
<update_guid>ce1af94c344718545cdda2fe3ef14e74</update_guid>
<update_guid_history>ce1af94c344718545cdda2fe3ef14e74:-581563447</update_guid_history>
<update_set display_value=""/>
<view/>
</sys_update_xml>
<sys_update_xml action="INSERT_OR_UPDATE">
<action>INSERT_OR_UPDATE</action>
<application display_value="YAML JSON Conversion">cbe7f1881b471854aed775561a4bcbc7</application>
<category>customer</category>
<comments/>
<name>sys_app_application_17242effdbbfa4502ed422e64896199d</name>
<payload><![CDATA[<?xml version="1.0" encoding="UTF-8"?><record_update sys_domain="global" table="sys_app_application"><sys_app_application action="INSERT_OR_UPDATE"><active>true</active><category display_value="Custom Applications">e0355b31ef303000a61d5a3615c0fb78</category><description/><device_type>browser</device_type><hint/><name/><order>100</order><roles>x_radi_yaml_json.user</roles><sys_class_name>sys_app_application</sys_class_name><sys_created_by>reese@rapdev.io</sys_created_by><sys_created_on>2021-05-05 16:53:27</sys_created_on><sys_domain>global</sys_domain><sys_domain_path>/</sys_domain_path><sys_id>17242effdbbfa4502ed422e64896199d</sys_id><sys_mod_count>1</sys_mod_count><sys_name>YAML JSON Conversion</sys_name><sys_overrides/><sys_package display_value="YAML JSON Conversion" source="x_radi_yaml_json">cbe7f1881b471854aed775561a4bcbc7</sys_package><sys_policy/><sys_scope display_value="YAML JSON Conversion">cbe7f1881b471854aed775561a4bcbc7</sys_scope><sys_update_name>sys_app_application_17242effdbbfa4502ed422e64896199d</sys_update_name><sys_updated_by>reese@rapdev.io</sys_updated_by><sys_updated_on>2021-05-05 18:51:02</sys_updated_on><title>YAML JSON Conversion</title><view_name/></sys_app_application></record_update>]]></payload>
<payload_hash>134253209</payload_hash>
<remote_update_set display_value="YAML JSON Conversion - 1.0.2">eccf469cdb103c102ed422e648961943</remote_update_set>
<replace_on_upgrade>false</replace_on_upgrade>
<sys_created_by>jon@rapdev.io</sys_created_by>
<sys_created_on>2021-05-19 14:54:11</sys_created_on>
<sys_id>24cf469cdb103c102ed422e648961944</sys_id>
<sys_mod_count>0</sys_mod_count>
<sys_recorded_at>179851e35a80000001</sys_recorded_at>
<sys_updated_by>jon@rapdev.io</sys_updated_by>
<sys_updated_on>2021-05-19 14:54:11</sys_updated_on>
<table/>
<target_name>YAML JSON Conversion</target_name>
<type>Application Menu</type>
<update_domain>global</update_domain>
<update_guid>65bfb27bae33e450a864cfb0c90e519a</update_guid>
<update_guid_history>65bfb27bae33e450a864cfb0c90e519a:134253209,cbc4a633e9ffa450a631fb6a7b1f55c2:1394895066</update_guid_history>
<update_set display_value=""/>
<view/>
</sys_update_xml>
<sys_update_xml action="INSERT_OR_UPDATE">
<action>INSERT_OR_UPDATE</action>
<application display_value="YAML JSON Conversion">cbe7f1881b471854aed775561a4bcbc7</application>
<category>customer</category>
<comments/>
<name>sys_scope_privilege_028d3d25db732850a269dbc6689619b3</name>
<payload><![CDATA[<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_scope_privilege"><sys_scope_privilege action="INSERT_OR_UPDATE"><operation>read</operation><source_scope display_value="YAML JSON Conversion">cbe7f1881b471854aed775561a4bcbc7</source_scope><status>allowed</status><sys_class_name>sys_scope_privilege</sys_class_name><sys_created_by>reese@rapdev.io</sys_created_by><sys_created_on>2021-04-28 14:15:33</sys_created_on><sys_id>028d3d25db732850a269dbc6689619b3</sys_id><sys_mod_count>0</sys_mod_count><sys_name>incident</sys_name><sys_package display_value="YAML JSON Conversion" source="x_radi_yaml_json">cbe7f1881b471854aed775561a4bcbc7</sys_package><sys_policy/><sys_scope display_value="YAML JSON Conversion">cbe7f1881b471854aed775561a4bcbc7</sys_scope><sys_update_name>sys_scope_privilege_028d3d25db732850a269dbc6689619b3</sys_update_name><sys_updated_by>reese@rapdev.io</sys_updated_by><sys_updated_on>2021-04-28 14:15:33</sys_updated_on><target_name>incident</target_name><target_scope display_value="Global">global</target_scope><target_type>sys_db_object</target_type></sys_scope_privilege></record_update>]]></payload>
<payload_hash>98846385</payload_hash>
<remote_update_set display_value="YAML JSON Conversion - 1.0.2">eccf469cdb103c102ed422e648961943</remote_update_set>
<replace_on_upgrade>false</replace_on_upgrade>
<sys_created_by>jon@rapdev.io</sys_created_by>
<sys_created_on>2021-05-19 14:54:11</sys_created_on>
<sys_id>24cf469cdb103c102ed422e648961945</sys_id>
<sys_mod_count>0</sys_mod_count>
<sys_recorded_at>179851e349e0000001</sys_recorded_at>
<sys_updated_by>jon@rapdev.io</sys_updated_by>
<sys_updated_on>2021-05-19 14:54:11</sys_updated_on>
<table/>
<target_name>incident</target_name>
<type>Cross scope privilege</type>
<update_domain>global</update_domain>
<update_guid>468d3d2511732850a3f77690a293e1b5</update_guid>
<update_guid_history>468d3d2511732850a3f77690a293e1b5:98846385</update_guid_history>
<update_set display_value=""/>
<view/>
</sys_update_xml>
<sys_update_xml action="INSERT_OR_UPDATE">
<action>INSERT_OR_UPDATE</action>
<application display_value="YAML JSON Conversion">cbe7f1881b471854aed775561a4bcbc7</application>
<category>customer</category>
<comments/>
<name>sys_security_acl_role_3ecfb67bdb33e4502ed422e6489619f6</name>
<payload><![CDATA[<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_security_acl_role"><sys_security_acl_role action="INSERT_OR_UPDATE"><sys_class_name>sys_security_acl_role</sys_class_name><sys_created_by>reese@rapdev.io</sys_created_by><sys_created_on>2021-05-05 18:54:05</sys_created_on><sys_id>3ecfb67bdb33e4502ed422e6489619f6</sys_id><sys_mod_count>0</sys_mod_count><sys_name>.x_radi_yaml_json.user</sys_name><sys_package display_value="YAML JSON Conversion" source="x_radi_yaml_json">cbe7f1881b471854aed775561a4bcbc7</sys_package><sys_policy/><sys_scope display_value="YAML JSON Conversion">cbe7f1881b471854aed775561a4bcbc7</sys_scope><sys_security_acl display_value="x_radi_yaml_json_rapdev_support">c6cfb67bdb33e4502ed422e6489619d6</sys_security_acl><sys_update_name>sys_security_acl_role_3ecfb67bdb33e4502ed422e6489619f6</sys_update_name><sys_updated_by>reese@rapdev.io</sys_updated_by><sys_updated_on>2021-05-05 18:54:05</sys_updated_on><sys_user_role display_value="x_radi_yaml_json.user" name="x_radi_yaml_json.user">ec3f3e3bdb33e4502ed422e648961940</sys_user_role><transaction_id/></sys_security_acl_role></record_update>]]></payload>
<payload_hash>-771471949</payload_hash>
<remote_update_set display_value="YAML JSON Conversion - 1.0.2">eccf469cdb103c102ed422e648961943</remote_update_set>
<replace_on_upgrade>false</replace_on_upgrade>
<sys_created_by>jon@rapdev.io</sys_created_by>
<sys_created_on>2021-05-19 14:54:11</sys_created_on>
<sys_id>24cf469cdb103c102ed422e648961948</sys_id>
<sys_mod_count>0</sys_mod_count>
<sys_recorded_at>179851e35ed0000001</sys_recorded_at>
<sys_updated_by>jon@rapdev.io</sys_updated_by>
<sys_updated_on>2021-05-19 14:54:11</sys_updated_on>
<table>x_radi_yaml_json_rapdev_support</table>
<target_name>.x_radi_yaml_json.user</target_name>
<type>Access Roles</type>
<update_domain>global</update_domain>
<update_guid>56600b7b4d33e450180693a54211b8ac</update_guid>
<update_guid_history>56600b7b4d33e450180693a54211b8ac:1030714014</update_guid_history>
<update_set display_value=""/>
<view/>
</sys_update_xml>
<sys_update_xml action="INSERT_OR_UPDATE">
<action>INSERT_OR_UPDATE</action>
<application display_value="YAML JSON Conversion">cbe7f1881b471854aed775561a4bcbc7</application>
<category>customer</category>
<comments/>
<name>sys_script_include_7018fd881b471854aed775561a4bcbd8</name>
<payload>&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;record_update table="sys_script_include"&gt;&lt;sys_script_include action="INSERT_OR_UPDATE"&gt;&lt;access&gt;public&lt;/access&gt;&lt;active&gt;true&lt;/active&gt;&lt;api_name&gt;x_radi_yaml_json.Yaml&lt;/api_name&gt;&lt;caller_access/&gt;&lt;client_callable&gt;false&lt;/client_callable&gt;&lt;description&gt;Entry point used to call Parser.&lt;/description&gt;&lt;name&gt;Yaml&lt;/name&gt;&lt;script&gt;&lt;![CDATA[/*
Modifed from https://github.com/jeremyfa/yaml.js

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is furnished
to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE.
*/

var Yaml = Class.create();
Yaml.prototype = {
    initialize: function() {
		
	},
	
	// Parses YAML into a JavaScript object.

	// The parse method, when supplied with a YAML string,
	// will do its best to convert YAML in a file into a JavaScript object.

	//  Usage:
	//     myObject = new Yaml.parse('some: yaml');
	//     gs.info(myObject);

	// @param [String]   input                   A string containing YAML
	// @param [Boolean]  exceptionOnInvalidType  true if an exception must be thrown on invalid types, false otherwise
	// @param [Function] objectDecoder           A function to deserialize custom objects, null otherwise

	// @return [Object]  The YAML converted to a JavaScript object

	// @throw [ParseException] If the YAML is not valid

	parse: function(input, exceptionOnInvalidType, objectDecoder) {
		if(exceptionOnInvalidType == undefined) {
			exceptionOnInvalidType = false;
		}
		if(objectDecoder == undefined) {
			objectDecoder = null;
		}
		var inputParsed = input.replace(/(\\n|\\r)/g, '\n');
		inputParsed = inputParsed.replace(/\\t/g, '\t');
		return new Parser().parse(inputParsed, exceptionOnInvalidType, objectDecoder);
	},

    type: 'Yaml'
};]]&gt;&lt;/script&gt;&lt;sys_class_name&gt;sys_script_include&lt;/sys_class_name&gt;&lt;sys_created_by&gt;jon&lt;/sys_created_by&gt;&lt;sys_created_on&gt;2020-08-30 19:05:36&lt;/sys_created_on&gt;&lt;sys_id&gt;7018fd881b471854aed775561a4bcbd8&lt;/sys_id&gt;&lt;sys_mod_count&gt;12&lt;/sys_mod_count&gt;&lt;sys_name&gt;Yaml&lt;/sys_name&gt;&lt;sys_package display_value="YAML JSON Conversion" source="x_radi_yaml_json"&gt;cbe7f1881b471854aed775561a4bcbc7&lt;/sys_package&gt;&lt;sys_policy&gt;read&lt;/sys_policy&gt;&lt;sys_scope display_value="YAML JSON Conversion"&gt;cbe7f1881b471854aed775561a4bcbc7&lt;/sys_scope&gt;&lt;sys_update_name&gt;sys_script_include_7018fd881b471854aed775561a4bcbd8&lt;/sys_update_name&gt;&lt;sys_updated_by&gt;jon@rapdev.io&lt;/sys_updated_by&gt;&lt;sys_updated_on&gt;2021-05-19 14:52:23&lt;/sys_updated_on&gt;&lt;/sys_script_include&gt;&lt;/record_update&gt;</payload>
<payload_hash>1805950437</payload_hash>
<remote_update_set display_value="YAML JSON Conversion - 1.0.2">eccf469cdb103c102ed422e648961943</remote_update_set>
<replace_on_upgrade>false</replace_on_upgrade>
<sys_created_by>jon@rapdev.io</sys_created_by>
<sys_created_on>2021-05-19 14:54:11</sys_created_on>
<sys_id>28cf469cdb103c102ed422e648961947</sys_id>
<sys_mod_count>0</sys_mod_count>
<sys_recorded_at>179851e36000000001</sys_recorded_at>
<sys_updated_by>jon@rapdev.io</sys_updated_by>
<sys_updated_on>2021-05-19 14:54:11</sys_updated_on>
<table/>
<target_name>Yaml</target_name>
<type>Script Include</type>
<update_domain>global</update_domain>
<update_guid>c25f0a9ce2103c10cfba4fcbb9739d40</update_guid>
<update_guid_history>c25f0a9ce2103c10cfba4fcbb9739d40:1805950437,865e8e1c4f103c10fd235a78e892b781:-1739783085,fe4e8a1c40103c10335fbaf68176ccf0:-395460037,c76a825833103c10f0b954a7d4750f5b:1913821947,e344f6bf0bffa450edf6b50b259fee22:-269033839,d13ef12972732850e27ae1912b47cb6f:1316067486,9ccafd258a7328504a74e7d2c675d6bc:-873146146,218a3d25a9732850c64467294ebbc286:952341344,c43af525c0732850461bdbd0a9c8d690:-1142973143,a925cd0fede3a8501e1dd10f3b7d4d25:-547241072,3db9754c39471854a28a7109a1988b57:-2036076623,12593d0c684718547d9742ee1daf3cff:-2119781061,89c8fd883d471854562da2e2326237a4:-2036076623</update_guid_history>
<update_set display_value=""/>
<view/>
</sys_update_xml>
<sys_update_xml action="INSERT_OR_UPDATE">
<action>INSERT_OR_UPDATE</action>
<application display_value="YAML JSON Conversion">cbe7f1881b471854aed775561a4bcbc7</application>
<category>customer</category>
<comments/>
<name>sys_scope_privilege_d5f9794c1b471854aed775561a4bcbfe</name>
<payload><![CDATA[<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_scope_privilege"><sys_scope_privilege action="INSERT_OR_UPDATE"><operation>execute</operation><source_scope display_value="YAML JSON Conversion">cbe7f1881b471854aed775561a4bcbc7</source_scope><status>allowed</status><sys_class_name>sys_scope_privilege</sys_class_name><sys_created_by>jon</sys_created_by><sys_created_on>2020-08-30 19:10:49</sys_created_on><sys_id>d5f9794c1b471854aed775561a4bcbfe</sys_id><sys_mod_count>0</sys_mod_count><sys_name>ScriptableRESTMessageClient.setBasicAuth</sys_name><sys_package display_value="YAML JSON Conversion" source="x_radi_yaml_json">cbe7f1881b471854aed775561a4bcbc7</sys_package><sys_policy/><sys_scope display_value="YAML JSON Conversion">cbe7f1881b471854aed775561a4bcbc7</sys_scope><sys_update_name>sys_scope_privilege_d5f9794c1b471854aed775561a4bcbfe</sys_update_name><sys_updated_by>jon</sys_updated_by><sys_updated_on>2020-08-30 19:10:49</sys_updated_on><target_name>ScriptableRESTMessageClient.setBasicAuth</target_name><target_scope display_value="Global">global</target_scope><target_type>scriptable</target_type></sys_scope_privilege></record_update>]]></payload>
<payload_hash>-1707640863</payload_hash>
<remote_update_set display_value="YAML JSON Conversion - 1.0.2">eccf469cdb103c102ed422e648961943</remote_update_set>
<replace_on_upgrade>false</replace_on_upgrade>
<sys_created_by>jon@rapdev.io</sys_created_by>
<sys_created_on>2021-05-19 14:54:11</sys_created_on>
<sys_id>2ccf469cdb103c102ed422e648961946</sys_id>
<sys_mod_count>0</sys_mod_count>
<sys_recorded_at>179851e2ebe0000001</sys_recorded_at>
<sys_updated_by>jon@rapdev.io</sys_updated_by>
<sys_updated_on>2021-05-19 14:54:11</sys_updated_on>
<table/>
<target_name>ScriptableRESTMessageClient.setBasicAuth</target_name>
<type>Cross scope privilege</type>
<update_domain>global</update_domain>
<update_guid>59f9794c0c471854f23b9466f91ce1ff</update_guid>
<update_guid_history>59f9794c0c471854f23b9466f91ce1ff:-1707640863</update_guid_history>
<update_set display_value=""/>
<view/>
</sys_update_xml>
<sys_update_xml action="INSERT_OR_UPDATE">
<action>INSERT_OR_UPDATE</action>
<application display_value="YAML JSON Conversion">cbe7f1881b471854aed775561a4bcbc7</application>
<category>customer</category>
<comments/>
<name>sys_embedded_help_role_9f3ffaf7db33e4502ed422e64896199e</name>
<payload><![CDATA[<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_embedded_help_role"><sys_embedded_help_role action="INSERT_OR_UPDATE"><order>1000</order><role display_value="x_radi_yaml_json.user" name="x_radi_yaml_json.user">ec3f3e3bdb33e4502ed422e648961940</role><sys_class_name>sys_embedded_help_role</sys_class_name><sys_created_by>reese@rapdev.io</sys_created_by><sys_created_on>2021-05-05 18:48:59</sys_created_on><sys_id>9f3ffaf7db33e4502ed422e64896199e</sys_id><sys_mod_count>0</sys_mod_count><sys_name>ec3f3e3bdb33e4502ed422e648961940</sys_name><sys_package display_value="YAML JSON Conversion" source="x_radi_yaml_json">cbe7f1881b471854aed775561a4bcbc7</sys_package><sys_policy/><sys_scope display_value="YAML JSON Conversion">cbe7f1881b471854aed775561a4bcbc7</sys_scope><sys_update_name>sys_embedded_help_role_9f3ffaf7db33e4502ed422e64896199e</sys_update_name><sys_updated_by>reese@rapdev.io</sys_updated_by><sys_updated_on>2021-05-05 18:48:59</sys_updated_on></sys_embedded_help_role></record_update>]]></payload>
<payload_hash>-1471737261</payload_hash>
<remote_update_set display_value="YAML JSON Conversion - 1.0.2">eccf469cdb103c102ed422e648961943</remote_update_set>
<replace_on_upgrade>false</replace_on_upgrade>
<sys_created_by>jon@rapdev.io</sys_created_by>
<sys_created_on>2021-05-19 14:54:11</sys_created_on>
<sys_id>60cf469cdb103c102ed422e648961945</sys_id>
<sys_mod_count>0</sys_mod_count>
<sys_recorded_at>179851e35830000001</sys_recorded_at>
<sys_updated_by>jon@rapdev.io</sys_updated_by>
<sys_updated_on>2021-05-19 14:54:11</sys_updated_on>
<table/>
<target_name>ec3f3e3bdb33e4502ed422e648961940</target_name>
<type>Embedded Help Role Priority</type>
<update_domain>global</update_domain>
<update_guid/>
<update_guid_history/>
<update_set display_value=""/>
<view/>
</sys_update_xml>
<sys_update_xml action="INSERT_OR_UPDATE">
<action>INSERT_OR_UPDATE</action>
<application display_value="YAML JSON Conversion">cbe7f1881b471854aed775561a4bcbc7</application>
<category>customer</category>
<comments/>
<name>sys_security_acl_c6cfb67bdb33e4502ed422e6489619d6</name>
<payload><![CDATA[<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_security_acl"><sys_security_acl action="INSERT_OR_UPDATE"><active>true</active><admin_overrides>true</admin_overrides><advanced>false</advanced><condition/><description/><name>x_radi_yaml_json_rapdev_support</name><operation display_value="read">read</operation><script/><sys_class_name>sys_security_acl</sys_class_name><sys_created_by>reese@rapdev.io</sys_created_by><sys_created_on>2021-05-05 18:54:05</sys_created_on><sys_id>c6cfb67bdb33e4502ed422e6489619d6</sys_id><sys_mod_count>0</sys_mod_count><sys_name>x_radi_yaml_json_rapdev_support</sys_name><sys_package display_value="YAML JSON Conversion" source="x_radi_yaml_json">cbe7f1881b471854aed775561a4bcbc7</sys_package><sys_policy/><sys_scope display_value="YAML JSON Conversion">cbe7f1881b471854aed775561a4bcbc7</sys_scope><sys_update_name>sys_security_acl_c6cfb67bdb33e4502ed422e6489619d6</sys_update_name><sys_updated_by>reese@rapdev.io</sys_updated_by><sys_updated_on>2021-05-05 18:54:05</sys_updated_on><type display_value="ui_page">ui_page</type></sys_security_acl></record_update>]]></payload>
<payload_hash>-1289506043</payload_hash>
<remote_update_set display_value="YAML JSON Conversion - 1.0.2">eccf469cdb103c102ed422e648961943</remote_update_set>
<replace_on_upgrade>false</replace_on_upgrade>
<sys_created_by>jon@rapdev.io</sys_created_by>
<sys_created_on>2021-05-19 14:54:11</sys_created_on>
<sys_id>60cf469cdb103c102ed422e648961948</sys_id>
<sys_mod_count>0</sys_mod_count>
<sys_recorded_at>179851e35cd0000001</sys_recorded_at>
<sys_updated_by>jon@rapdev.io</sys_updated_by>
<sys_updated_on>2021-05-19 14:54:11</sys_updated_on>
<table>x_radi_yaml_json_rapdev_support</table>
<target_name>x_radi_yaml_json_rapdev_support</target_name>
<type>Access Control</type>
<update_domain>global</update_domain>
<update_guid>9e6043bb3f33e4504e420aced9f178f8</update_guid>
<update_guid_history>9e6043bb3f33e4504e420aced9f178f8:-1289506043</update_guid_history>
<update_set display_value=""/>
<view/>
</sys_update_xml>
<sys_update_xml action="INSERT_OR_UPDATE">
<action>INSERT_OR_UPDATE</action>
<application display_value="YAML JSON Conversion">cbe7f1881b471854aed775561a4bcbc7</application>
<category>customer</category>
<comments/>
<name>sys_script_include_3ad8b10c1b471854aed775561a4bcb9a</name>
<payload>&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;record_update table="sys_script_include"&gt;&lt;sys_script_include action="INSERT_OR_UPDATE"&gt;&lt;access&gt;package_private&lt;/access&gt;&lt;active&gt;true&lt;/active&gt;&lt;api_name&gt;x_radi_yaml_json.Parser&lt;/api_name&gt;&lt;caller_access/&gt;&lt;client_callable&gt;false&lt;/client_callable&gt;&lt;description&gt;Primary YAML parser class.&lt;/description&gt;&lt;name&gt;Parser&lt;/name&gt;&lt;script&gt;&lt;![CDATA[/*
Modifed from https://github.com/jeremyfa/yaml.js

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is furnished
to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE.
*/

var Parser = Class.create();

Parser.prototype = {
	// Pre-compiled patterns
	PATTERN_FOLDED_SCALAR_ALL: new Pattern('^(?:(?&lt;type&gt;![^\\|&gt;]*)\\s+)?(?&lt;separator&gt;\\||&gt;)(?&lt;modifiers&gt;\\+|\\-|\\d+|\\+\\d+|\\-\\d+|\\d+\\+|\\d+\\-)?(?&lt;comments&gt; +#.*)?$'),
	PATTERN_FOLDED_SCALAR_END: new Pattern('(?&lt;separator&gt;\\||&gt;)(?&lt;modifiers&gt;\\+|\\-|\\d+|\\+\\d+|\\-\\d+|\\d+\\+|\\d+\\-)?(?&lt;comments&gt; +#.*)?$'),
	PATTERN_SEQUENCE_ITEM: new Pattern('^\\-((?&lt;leadspaces&gt;\\s+)(?&lt;value&gt;.+?))?\\s*$'),
	PATTERN_ANCHOR_VALUE: new Pattern('^&amp;(?&lt;ref&gt;[^ ]+) *(?&lt;value&gt;.*)'),
	PATTERN_COMPACT_NOTATION: new Pattern('^(?&lt;key&gt;' + Inline.REGEX_QUOTED_STRING + '|[^ \'"\\{\\[].*?) *\\:(\\s+(?&lt;value&gt;.+?))?\\s*$'),
	PATTERN_MAPPING_ITEM: new Pattern('^(?&lt;key&gt;' + Inline.REGEX_QUOTED_STRING + '|[^ \'"\\[\\{].*?) *\\:(\\s+(?&lt;value&gt;.+?))?\\s*$'),
	PATTERN_DECIMAL: new Pattern('\\d+'),
	PATTERN_INDENT_SPACES: new Pattern('^ +'),
	PATTERN_TRAILING_LINES: new Pattern('(\n*)$'),
	PATTERN_YAML_HEADER: new Pattern('^\\%YAML[: ][\\d\\.]+.*\n', 'm'),
	PATTERN_LEADING_COMMENTS: new Pattern('^(\\#.*?\n)+', 'm'),
	PATTERN_DOCUMENT_MARKER_START: new Pattern('^\\-\\-\\-.*?\n', 'm'),
	PATTERN_DOCUMENT_MARKER_END: new Pattern('^\\.\\.\\.\\s*$', 'm'),
	PATTERN_FOLDED_SCALAR_BY_INDENTATION: {},
	// Context types
	CONTEXT_NONE: 0,
	CONTEXT_SEQUENCE: 1,
	CONTEXT_MAPPING: 2,
	
	
    initialize: function(offset) {
		this.Inline = new Inline();
		this.Utils = new Utils();
		if(offset == undefined) {
			offset = 0;
		}
		this.offset = offset;
		this.lines = [];
		this.currentLineNb = -1;
		this.currentLine = '';
		this.refs = {};		
    },
	
	parse: function(value, exceptionOnInvalidType, objectDecoder) {
		if(exceptionOnInvalidType == undefined) {
			exceptionOnInvalidType = false;
		}
		if(objectDecoder == undefined) {
			objectDecoder = null;
		}
		
		var alias, allowOverwrite, block, c, context, data, e, first, i, indent, isRef, j, k, key, l, lastKey, len, len1, len2, len3, lineCount, m, matches, mergeNode, n, name, parsed, parsedItem, parser, ref, ref1, ref2, refName, refValue, val, values;
		this.currentLineNb = -1;
		this.currentLine = '';
		this.lines = this.cleanup(value).split("\n");
		data = null;
		context = this.CONTEXT_NONE;
		allowOverwrite = false;
		while (this.moveToNextLine()) {
			if (this.isCurrentLineEmpty()) {
				continue;
			}
			// Tab?
			if ("\t" === this.currentLine[0]) {
				throw new ParseException('A YAML file cannot contain tabs as indentation.', this.getRealCurrentLineNb() + 1, this.currentLine);
			}
			isRef = mergeNode = false;
			if (values = this.PATTERN_SEQUENCE_ITEM.exec(this.currentLine)) {
				if (this.CONTEXT_MAPPING === context) {
					throw new ParseException('You cannot define a sequence item when in a mapping');
				}
				context = this.CONTEXT_SEQUENCE;
				if (data == null) {
					data = [];
				}
				if ((values.value != null) &amp;&amp; (matches = this.PATTERN_ANCHOR_VALUE.exec(values.value))) {
					isRef = matches.ref;
					values.value = matches.value;
				}
				// Array
				if (!(values.value != null) || '' === this.Utils.trim(values.value, ' ') || this.Utils.ltrim(values.value, ' ').indexOf('#') === 0) {
					if (this.currentLineNb &lt; this.lines.length - 1 &amp;&amp; !this.isNextLineUnIndentedCollection()) {
						c = this.getRealCurrentLineNb() + 1;
						parser = new Parser(c);
						parser.refs = this.refs;
						data.push(parser.parse(this.getNextEmbedBlock(null, true), exceptionOnInvalidType, objectDecoder));
					} else {
						data.push(null);
					}
				} else {
					if (((ref = values.leadspaces) != null ? ref.length : void 0) &amp;&amp; (matches = this.PATTERN_COMPACT_NOTATION.exec(values.value))) {
						// This is a compact notation element, add to next block and parse
						c = this.getRealCurrentLineNb();
						parser = new Parser(c);
						parser.refs = this.refs;
						block = values.value;
						indent = this.getCurrentLineIndentation();
						if (this.isNextLineIndented(false)) {
							block += "\n" + this.getNextEmbedBlock(indent + values.leadspaces.length + 1, true);
						}
						data.push(parser.parse(block, exceptionOnInvalidType, objectDecoder));
					} else {
						data.push(this.parseValue(values.value, exceptionOnInvalidType, objectDecoder));
					}
				}
			} else if ((values = this.PATTERN_MAPPING_ITEM.exec(this.currentLine)) &amp;&amp; values.key.indexOf(' #') === -1) {
				if (this.CONTEXT_SEQUENCE === context) {
					throw new ParseException('You cannot define a mapping item when in a sequence');
				}
				context = this.CONTEXT_MAPPING;
				if (data == null) {
					data = {};
				}
				// Force correct settings
				this.Inline.configure(exceptionOnInvalidType, objectDecoder);
				try {
					key = this.Inline.parseScalar(values.key);
				} catch (error) {
					e = error;
					e.parsedLine = this.getRealCurrentLineNb() + 1;
					e.snippet = this.currentLine;
					throw e;
				}
				if ('&lt;&lt;' === key) {
					mergeNode = true;
					allowOverwrite = true;
					if (((ref1 = values.value) != null ? ref1.indexOf('*') : void 0) === 0) {
						refName = values.value.slice(1);
						if (this.refs[refName] == null) {
							throw new ParseException('Reference "' + refName + '" does not exist.', this.getRealCurrentLineNb() + 1, this.currentLine);
						}
						refValue = this.refs[refName];
						if (typeof refValue !== 'object') {
							throw new ParseException('YAML merge keys used with a scalar value instead of an object.', this.getRealCurrentLineNb() + 1, this.currentLine);
						}
						if (refValue instanceof Array) {
							// Merge array with object
							for (i = j = 0, len = refValue.length; j &lt; len; i = ++j) {
								value = refValue[i];
								if (data[name = String(i)] == null) {
									data[name] = value;
								}
							}
						} else {
							// Merge objects
							for (key in refValue) {
								value = refValue[key];
								if (data[key] == null) {
									data[key] = value;
								}
							}
						}
					} else {
						if ((values.value != null) &amp;&amp; values.value !== '') {
							value = values.value;
						} else {
							value = this.getNextEmbedBlock();
						}
						c = this.getRealCurrentLineNb() + 1;
						parser = new Parser(c);
						parser.refs = this.refs;
						parsed = parser.parse(value, exceptionOnInvalidType);
						if (typeof parsed !== 'object') {
							throw new ParseException('YAML merge keys used with a scalar value instead of an object.', this.getRealCurrentLineNb() + 1, this.currentLine);
						}
						if (parsed instanceof Array) {
							// If the value associated with the merge key is a sequence, then this sequence is expected to contain mapping nodes
							// and each of these nodes is merged in turn according to its order in the sequence. Keys in mapping nodes earlier
							// in the sequence override keys specified in later mapping nodes.
							for (l = 0, len1 = parsed.length; l &lt; len1; l++) {
								parsedItem = parsed[l];
								if (typeof parsedItem !== 'object') {
									throw new ParseException('Merge items must be objects.', this.getRealCurrentLineNb() + 1, parsedItem);
								}
								if (parsedItem instanceof Array) {
									// Merge array with object
									for (i = m = 0, len2 = parsedItem.length; m &lt; len2; i = ++m) {
										value = parsedItem[i];
										k = String(i);
										if (!data.hasOwnProperty(k)) {
											data[k] = value;
										}
									}
								} else {
									// Merge objects
									for (key in parsedItem) {
										value = parsedItem[key];
										if (!data.hasOwnProperty(key)) {
											data[key] = value;
										}
									}
								}
							}
						} else {
							// If the value associated with the key is a single mapping node, each of its key/value pairs is inserted into the
							// current mapping, unless the key already exists in it.
							for (key in parsed) {
								value = parsed[key];
								if (!data.hasOwnProperty(key)) {
									data[key] = value;
								}
							}
						}
					}
				} else if ((values.value != null) &amp;&amp; (matches = this.PATTERN_ANCHOR_VALUE.exec(values.value))) {
					isRef = matches.ref;
					values.value = matches.value;
				}
				if (mergeNode) {
					// Merge keys
				} else if (!(values.value != null) || '' === this.Utils.trim(values.value, ' ') || this.Utils.ltrim(values.value, ' ').indexOf('#') === 0) {
					// Hash
					// if next line is less indented or equal, then it means that the current value is null
					if (!(this.isNextLineIndented()) &amp;&amp; !(this.isNextLineUnIndentedCollection())) {
						// Spec: Keys MUST be unique; first one wins.
						// But overwriting is allowed when a merge node is used in current block.
						if (allowOverwrite || data[key] === void 0) {
							data[key] = null;
						}
					} else {
						c = this.getRealCurrentLineNb() + 1;
						parser = new Parser(c);
						parser.refs = this.refs;
						val = parser.parse(this.getNextEmbedBlock(), exceptionOnInvalidType, objectDecoder);
						// Spec: Keys MUST be unique; first one wins.
						// But overwriting is allowed when a merge node is used in current block.
						if (allowOverwrite || data[key] === void 0) {
							data[key] = val;
						}
					}
				} else {
					val = this.parseValue(values.value, exceptionOnInvalidType, objectDecoder);
					// Spec: Keys MUST be unique; first one wins.
					// But overwriting is allowed when a merge node is used in current block.
					if (allowOverwrite || data[key] === void 0) {
						data[key] = val;
					}
				}
			} else {
				// 1-liner optionally followed by newline
				lineCount = this.lines.length;
				if (1 === lineCount || (2 === lineCount &amp;&amp; this.Utils.isEmpty(this.lines[1]))) {
					try {
						value = this.Inline.parse(this.lines[0], exceptionOnInvalidType, objectDecoder);
					} catch (error) {
						e = error;
						e.parsedLine = this.getRealCurrentLineNb() + 1;
						e.snippet = this.currentLine;
						throw e;
					}
					if (typeof value === 'object') {
						if (value instanceof Array) {
							first = value[0];
						} else {
							for (key in value) {
								first = value[key];
								break;
							}
						}
						if (typeof first === 'string' &amp;&amp; first.indexOf('*') === 0) {
							data = [];
							for (n = 0, len3 = value.length; n &lt; len3; n++) {
								alias = value[n];
								data.push(this.refs[alias.slice(1)]);
							}
							value = data;
						}
					}
					return value;
				} else if ((ref2 = this.Utils.ltrim(value).charAt(0)) === '[' || ref2 === '{') {
					try {
						return this.Inline.parse(value, exceptionOnInvalidType, objectDecoder);
					} catch (error) {
						e = error;
						e.parsedLine = this.getRealCurrentLineNb() + 1;
						e.snippet = this.currentLine;
						throw e;
					}
				}
				throw new ParseException('Unable to parse.', this.getRealCurrentLineNb() + 1, this.currentLine);
			}
			if (isRef) {
				if (data instanceof Array) {
					this.refs[isRef] = data[data.length - 1];
				} else {
					lastKey = null;
					for (key in data) {
						lastKey = key;
					}
					this.refs[isRef] = data[lastKey];
				}
			}
		}
		if (this.Utils.isEmpty(data)) {
			return null;
		} else {
			return data;
		}
    },
	
	// Returns the current line number (takes the offset into account).

    // @return [Integer]     The current line number

	getRealCurrentLineNb: function() {
		return this.currentLineNb + this.offset;
    },

    // Returns the current line indentation.

    // @return [Integer]     The current line indentation

    getCurrentLineIndentation: function() {
		return this.currentLine.length - this.Utils.ltrim(this.currentLine, ' ').length;
    },
	
	// Returns the next embed block of YAML.

    // @param [Integer]          indentation The indent level at which the block is to be read, or null for default

    // @return [String]          A YAML string

    // @throw [ParseException]   When indentation problem are detected

    getNextEmbedBlock: function(indentation, includeUnindentedCollection) {
		if(indentation == undefined) {
			indentation = null;
		}
		if(includeUnindentedCollection == undefined) {
			includeUnindentedCollection = false;
		}
		var data, indent, isItUnindentedCollection, newIndent, removeComments, removeCommentsPattern, unindentedEmbedBlock;
		this.moveToNextLine();
		if (indentation == null) {
			newIndent = this.getCurrentLineIndentation();
			unindentedEmbedBlock = this.isStringUnIndentedCollectionItem(this.currentLine);
			if (!(this.isCurrentLineEmpty()) &amp;&amp; 0 === newIndent &amp;&amp; !unindentedEmbedBlock) {
				throw new ParseException('Indentation problem.', this.getRealCurrentLineNb() + 1, this.currentLine);
			}
		} else {
			newIndent = indentation;
		}
		data = [this.currentLine.slice(newIndent)];
		if (!includeUnindentedCollection) {
			isItUnindentedCollection = this.isStringUnIndentedCollectionItem(this.currentLine);
		}
		// Comments must not be removed inside a string block (ie. after a line ending with "|")
		// They must not be removed inside a sub-embedded block as well
		removeCommentsPattern = this.PATTERN_FOLDED_SCALAR_END;
		removeComments = !removeCommentsPattern.test(this.currentLine);
		while (this.moveToNextLine()) {
			indent = this.getCurrentLineIndentation();
			if (indent === newIndent) {
				removeComments = !removeCommentsPattern.test(this.currentLine);
			}
			if (removeComments &amp;&amp; this.isCurrentLineComment()) {
				continue;
			}
			if (this.isCurrentLineBlank()) {
				data.push(this.currentLine.slice(newIndent));
				continue;
			}
			if (isItUnindentedCollection &amp;&amp; !this.isStringUnIndentedCollectionItem(this.currentLine) &amp;&amp; indent === newIndent) {
				this.moveToPreviousLine();
				break;
			}
			if (indent &gt;= newIndent) {
				data.push(this.currentLine.slice(newIndent));
			} else if (this.Utils.ltrim(this.currentLine).charAt(0) === '#') {

				// Don't add line with comments
			} else if (0 === indent) {
				this.moveToPreviousLine();
				break;
			} else {
				throw new ParseException('Indentation problem.', this.getRealCurrentLineNb() + 1, this.currentLine);
			}
		}
		return data.join("\n");
    },
	
	// Moves the parser to the next line.

    // @return [Boolean]

    moveToNextLine: function() {
		if (this.currentLineNb &gt;= this.lines.length - 1) {
			return false;
		}
		this.currentLine = this.lines[++this.currentLineNb];
		return true;
    },

    // Moves the parser to the previous line.

    moveToPreviousLine: function() {
		this.currentLine = this.lines[--this.currentLineNb];
    },
	
	// Parses a YAML value.

    // @param [String]   value                   A YAML value
    // @param [Boolean]  exceptionOnInvalidType  true if an exception must be thrown on invalid types false otherwise
    // @param [Function] objectDecoder           A function to deserialize custom objects, null otherwise

    // @return [Object] A JavaScript value

    // @throw [ParseException] When reference does not exist

    parseValue: function(value, exceptionOnInvalidType, objectDecoder) {
		var e, foldedIndent, matches, modifiers, pos, ref, ref1, val;
		if (0 === value.indexOf('*')) {
			pos = value.indexOf('#');
			if (pos !== -1) {
				value = value.substr(1, pos - 2);
			} else {
				value = value.slice(1);
			}
			if (this.refs[value] === void 0) {
				throw new ParseException('Reference "' + value + '" does not exist.', this.currentLine);
			}
			return this.refs[value];
		}
		if (matches = this.PATTERN_FOLDED_SCALAR_ALL.exec(value)) {
			modifiers = (ref = matches.modifiers) != null ? ref : '';
			foldedIndent = Math.abs(parseInt(modifiers));
			if (isNaN(foldedIndent)) {
				foldedIndent = 0;
			}
			val = this.parseFoldedScalar(matches.separator, this.PATTERN_DECIMAL.replace(modifiers, ''), foldedIndent);
			if (matches.type != null) {
				// Force correct settings
				this.Inline.configure(exceptionOnInvalidType, objectDecoder);
				return this.Inline.parseScalar(matches.type + ' ' + val);
			} else {
				return val;
			}
		}
		// Value can be multiline compact sequence or mapping or string
		if ((ref1 = value.charAt(0)) === '[' || ref1 === '{' || ref1 === '"' || ref1 === "'") {
			while (true) {
				try {
					return this.Inline.parse(value, exceptionOnInvalidType, objectDecoder);
				} catch (error) {
					e = error;
					if (e instanceof ParseMore &amp;&amp; this.moveToNextLine()) {
						value += "\n" + this.Utils.trim(this.currentLine, ' ');
					} else {
						e.parsedLine = this.getRealCurrentLineNb() + 1;
						e.snippet = this.currentLine;
						throw e;
					}
				}
			}
		} else {
			if (this.isNextLineIndented()) {
				value += "\n" + this.getNextEmbedBlock();
			}
			return this.Inline.parse(value, exceptionOnInvalidType, objectDecoder);
		}
	},
	
	// Parses a folded scalar.

    // @param [String]       separator   The separator that was used to begin this folded scalar (| or &gt;)
    // @param [String]       indicator   The indicator that was used to begin this folded scalar (+ or -)
    // @param [Integer]      indentation The indentation that was used to begin this folded scalar

    // @return [String]      The text value

    parseFoldedScalar: function(separator, indicator, indentation) {
		if(indicator == undefined) {
			indicator = '';
		}
		if(indentation == undefined) {
			indentation = 0;
		}
		var isCurrentLineBlank, j, len, line, matches, newText, notEOF, pattern, ref, text;
		notEOF = this.moveToNextLine();
		if (!notEOF) {
			return '';
		}
		isCurrentLineBlank = this.isCurrentLineBlank();
		text = '';
		// Leading blank lines are consumed before determining indentation
		while (notEOF &amp;&amp; isCurrentLineBlank) {
			// newline only if not EOF
			if (notEOF = this.moveToNextLine()) {
				text += "\n";
				isCurrentLineBlank = this.isCurrentLineBlank();
			}
		}
		// Determine indentation if not specified
		if (0 === indentation) {
			if (matches = this.PATTERN_INDENT_SPACES.exec(this.currentLine)) {
				indentation = matches[0].length;
			}
		}
		if (indentation &gt; 0) {
			pattern = this.PATTERN_FOLDED_SCALAR_BY_INDENTATION[indentation];
			if (pattern == null) {
				pattern = new Pattern('^ {' + indentation + '}(.*)$');
				Parser.prototype.PATTERN_FOLDED_SCALAR_BY_INDENTATION[indentation] = pattern;
			}
			while (notEOF &amp;&amp; (isCurrentLineBlank || (matches = pattern.exec(this.currentLine)))) {
				if (isCurrentLineBlank) {
					text += this.currentLine.slice(indentation);
				} else {
					text += matches[1];
				}
				// newline only if not EOF
				if (notEOF = this.moveToNextLine()) {
					text += "\n";
					isCurrentLineBlank = this.isCurrentLineBlank();
				}
			}
		} else if (notEOF) {
			text += "\n";
		}
		if (notEOF) {
			this.moveToPreviousLine();
		}
		// Remove line breaks of each lines except the empty and more indented ones
		if ('&gt;' === separator) {
			newText = '';
			ref = text.split("\n");
			for (j = 0, len = ref.length; j &lt; len; j++) {
				line = ref[j];
				if (line.length === 0 || line.charAt(0) === ' ') {
					newText = this.Utils.rtrim(newText, ' ') + line + "\n";
				} else {
					newText += line + ' ';
				}
			}
			text = newText;
		}
		if ('+' !== indicator) {
			// Remove any extra space or new line as we are adding them after
			text = this.Utils.rtrim(text);
		}
		// Deal with trailing newlines as indicated
		if ('' === indicator) {
			text = this.PATTERN_TRAILING_LINES.replace(text, "\n");
		} else if ('-' === indicator) {
			text = this.PATTERN_TRAILING_LINES.replace(text, '');
		}
		return text;
    },
	
	// Returns true if the next line is indented.

    // @return [Boolean]     Returns true if the next line is indented, false otherwise

    isNextLineIndented: function(ignoreComments) {
		if(ignoreComments == undefined) {
			ignoreComments = true;
		}
		var EOF, currentIndentation, ret;
		currentIndentation = this.getCurrentLineIndentation();
		EOF = !this.moveToNextLine();
		if (ignoreComments) {
			while (!EOF &amp;&amp; this.isCurrentLineEmpty()) {
				EOF = !this.moveToNextLine();
			}
		} else {
			while (!EOF &amp;&amp; this.isCurrentLineBlank()) {
				EOF = !this.moveToNextLine();
			}
		}
		if (EOF) {
			return false;
		}
		ret = false;
		if (this.getCurrentLineIndentation() &gt; currentIndentation) {
			ret = true;
		}
		this.moveToPreviousLine();
		return ret;
    },
	
	// Returns true if the current line is blank or if it is a comment line.

    // @return [Boolean]     Returns true if the current line is empty or if it is a comment line, false otherwise

    isCurrentLineEmpty: function() {
		var trimmedLine;
		trimmedLine = this.Utils.trim(this.currentLine, ' ');
		return trimmedLine.length === 0 || trimmedLine.charAt(0) === '#';
    },

    // Returns true if the current line is blank.

    // @return [Boolean]     Returns true if the current line is blank, false otherwise

    isCurrentLineBlank: function() {
		return '' === this.Utils.trim(this.currentLine, ' ');
    },

    // Returns true if the current line is a comment line.

    // @return [Boolean]     Returns true if the current line is a comment line, false otherwise

    isCurrentLineComment: function() {
		var ltrimmedLine;
		// Checking explicitly the first char of the trim is faster than loops or strpos
		ltrimmedLine = this.Utils.ltrim(this.currentLine, ' ');
		return ltrimmedLine.charAt(0) === '#';
    },

    // Cleanups a YAML string to be parsed.

    // @param [String]   value The input YAML string

    // @return [String]  A cleaned up YAML string

    cleanup: function(value) {
		var arr;
		var count, i, indent, j, l, len, len1, line, lines, smallestIndent, trimmedValue;
		if (value.indexOf("\r") !== -1) {
			value = value.split("\r\n").join("\n").split("\r").join("\n");
		}
		// Strip YAML header
		count = 0;
		arr = this.PATTERN_YAML_HEADER.replaceAll(value, ''); //[value, count]
		value = arr[0];
		count = arr[1];
		this.offset += count;
		// Remove leading comments
		arr = this.PATTERN_LEADING_COMMENTS.replaceAll(value, '', 1); //[trimmedValue, count]
		trimmedValue = arr[0];
		count = arr[1];
		if (count === 1) {
			// Items have been removed, update the offset
			this.offset += this.Utils.subStrCount(value, "\n") - this.Utils.subStrCount(trimmedValue, "\n");
			value = trimmedValue;
		}
		// Remove start of the document marker (---)
		arr = this.PATTERN_DOCUMENT_MARKER_START.replaceAll(value, '', 1); //[trimmedValue, count]
		trimmedValue = arr[0];
		count = arr[1];
		if (count === 1) {
			// Items have been removed, update the offset
			this.offset += this.Utils.subStrCount(value, "\n") - this.Utils.subStrCount(trimmedValue, "\n");
			value = trimmedValue;
			// Remove end of the document marker (...)
			value = this.PATTERN_DOCUMENT_MARKER_END.replace(value, '');
		}
		// Ensure the block is not indented
		lines = value.split("\n");
		smallestIndent = -1;
		for (j = 0, len = lines.length; j &lt; len; j++) {
			line = lines[j];
			if (this.Utils.trim(line, ' ').length === 0) {
				continue;
			}
			indent = line.length - this.Utils.ltrim(line).length;
			if (smallestIndent === -1 || indent &lt; smallestIndent) {
				smallestIndent = indent;
			}
		}
		if (smallestIndent &gt; 0) {
			for (i = l = 0, len1 = lines.length; l &lt; len1; i = ++l) {
				line = lines[i];
				lines[i] = line.slice(smallestIndent);
			}
			value = lines.join("\n");
		}
		return value;
    },

    // Returns true if the next line starts unindented collection

    // @return [Boolean]     Returns true if the next line starts unindented collection, false otherwise

    isNextLineUnIndentedCollection: function(currentIndentation) {
		if(currentIndentation == undefined) {
			currentIndentation = null;
		}
		var notEOF, ret;
		if (currentIndentation == null) {
			currentIndentation = this.getCurrentLineIndentation();
		}
		notEOF = this.moveToNextLine();
		while (notEOF &amp;&amp; this.isCurrentLineEmpty()) {
			notEOF = this.moveToNextLine();
		}
		if (false === notEOF) {
			return false;
		}
		ret = false;
		if (this.getCurrentLineIndentation() === currentIndentation &amp;&amp; this.isStringUnIndentedCollectionItem(this.currentLine)) {
			ret = true;
		}
		this.moveToPreviousLine();
		return ret;
    },

    // Returns true if the string is un-indented collection item

    // @return [Boolean]     Returns true if the string is un-indented collection item, false otherwise

    isStringUnIndentedCollectionItem: function() {
		return this.currentLine === '-' || this.currentLine.slice(0, 2) === '- ';
    },

    type: 'Parser'
};]]&gt;&lt;/script&gt;&lt;sys_class_name&gt;sys_script_include&lt;/sys_class_name&gt;&lt;sys_created_by&gt;jon&lt;/sys_created_by&gt;&lt;sys_created_on&gt;2020-08-30 19:07:02&lt;/sys_created_on&gt;&lt;sys_id&gt;3ad8b10c1b471854aed775561a4bcb9a&lt;/sys_id&gt;&lt;sys_mod_count&gt;2&lt;/sys_mod_count&gt;&lt;sys_name&gt;Parser&lt;/sys_name&gt;&lt;sys_package display_value="YAML JSON Conversion" source="x_radi_yaml_json"&gt;cbe7f1881b471854aed775561a4bcbc7&lt;/sys_package&gt;&lt;sys_policy&gt;read&lt;/sys_policy&gt;&lt;sys_scope display_value="YAML JSON Conversion"&gt;cbe7f1881b471854aed775561a4bcbc7&lt;/sys_scope&gt;&lt;sys_update_name&gt;sys_script_include_3ad8b10c1b471854aed775561a4bcb9a&lt;/sys_update_name&gt;&lt;sys_updated_by&gt;reese@rapdev.io&lt;/sys_updated_by&gt;&lt;sys_updated_on&gt;2021-05-05 18:22:46&lt;/sys_updated_on&gt;&lt;/sys_script_include&gt;&lt;/record_update&gt;</payload>
<payload_hash>1489189221</payload_hash>
<remote_update_set display_value="YAML JSON Conversion - 1.0.2">eccf469cdb103c102ed422e648961943</remote_update_set>
<replace_on_upgrade>false</replace_on_upgrade>
<sys_created_by>jon@rapdev.io</sys_created_by>
<sys_created_on>2021-05-19 14:54:11</sys_created_on>
<sys_id>64cf469cdb103c102ed422e648961947</sys_id>
<sys_mod_count>0</sys_mod_count>
<sys_recorded_at>179851e35720000001</sys_recorded_at>
<sys_updated_by>jon@rapdev.io</sys_updated_by>
<sys_updated_on>2021-05-19 14:54:11</sys_updated_on>
<table/>
<target_name>Parser</target_name>
<type>Script Include</type>
<update_domain>global</update_domain>
<update_guid>533972f33f33e4506e8f0f53cbc9d275</update_guid>
<update_guid_history>533972f33f33e4506e8f0f53cbc9d275:1489189221,c9a4adc3b9a7a8504fde85ff1cab60c5:1898530353,3519790c0f47185421b5af7d3c5a1111:-230306483</update_guid_history>
<update_set display_value=""/>
<view/>
</sys_update_xml>
<sys_update_xml action="INSERT_OR_UPDATE">
<action>INSERT_OR_UPDATE</action>
<application display_value="YAML JSON Conversion">cbe7f1881b471854aed775561a4bcbc7</application>
<category>customer</category>
<comments/>
<name>sys_scope_privilege_c28db9e5db732850a269dbc6689619f7</name>
<payload><![CDATA[<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_scope_privilege"><sys_scope_privilege action="INSERT_OR_UPDATE"><operation>execute</operation><source_scope display_value="YAML JSON Conversion">cbe7f1881b471854aed775561a4bcbc7</source_scope><status>allowed</status><sys_class_name>sys_scope_privilege</sys_class_name><sys_created_by>reese@rapdev.io</sys_created_by><sys_created_on>2021-04-28 14:15:33</sys_created_on><sys_id>c28db9e5db732850a269dbc6689619f7</sys_id><sys_mod_count>0</sys_mod_count><sys_name>ScopedGlideElement</sys_name><sys_package display_value="YAML JSON Conversion" source="x_radi_yaml_json">cbe7f1881b471854aed775561a4bcbc7</sys_package><sys_policy/><sys_scope display_value="YAML JSON Conversion">cbe7f1881b471854aed775561a4bcbc7</sys_scope><sys_update_name>sys_scope_privilege_c28db9e5db732850a269dbc6689619f7</sys_update_name><sys_updated_by>reese@rapdev.io</sys_updated_by><sys_updated_on>2021-04-28 14:15:33</sys_updated_on><target_name>ScopedGlideElement</target_name><target_scope display_value="Global">global</target_scope><target_type>scriptable</target_type></sys_scope_privilege></record_update>]]></payload>
<payload_hash>-1755776159</payload_hash>
<remote_update_set display_value="YAML JSON Conversion - 1.0.2">eccf469cdb103c102ed422e648961943</remote_update_set>
<replace_on_upgrade>false</replace_on_upgrade>
<sys_created_by>jon@rapdev.io</sys_created_by>
<sys_created_on>2021-05-19 14:54:11</sys_created_on>
<sys_id>68cf469cdb103c102ed422e648961946</sys_id>
<sys_mod_count>0</sys_mod_count>
<sys_recorded_at>179851e348f0000001</sys_recorded_at>
<sys_updated_by>jon@rapdev.io</sys_updated_by>
<sys_updated_on>2021-05-19 14:54:11</sys_updated_on>
<table/>
<target_name>ScopedGlideElement</target_name>
<type>Cross scope privilege</type>
<update_domain>global</update_domain>
<update_guid>0a8db9e5a1732850ccadc1bc874f09f8</update_guid>
<update_guid_history>0a8db9e5a1732850ccadc1bc874f09f8:-1755776159</update_guid_history>
<update_set display_value=""/>
<view/>
</sys_update_xml>
<sys_update_xml action="INSERT_OR_UPDATE">
<action>INSERT_OR_UPDATE</action>
<application display_value="YAML JSON Conversion">cbe7f1881b471854aed775561a4bcbc7</application>
<category>customer</category>
<comments/>
<name>sys_scope_privilege_61f9b94c1b471854aed775561a4bcb03</name>
<payload><![CDATA[<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_scope_privilege"><sys_scope_privilege action="INSERT_OR_UPDATE"><operation>execute</operation><source_scope display_value="YAML JSON Conversion">cbe7f1881b471854aed775561a4bcbc7</source_scope><status>allowed</status><sys_class_name>sys_scope_privilege</sys_class_name><sys_created_by>jon</sys_created_by><sys_created_on>2020-08-30 19:10:49</sys_created_on><sys_id>61f9b94c1b471854aed775561a4bcb03</sys_id><sys_mod_count>0</sys_mod_count><sys_name>ScriptableRESTMessageClient.setRequestHeader</sys_name><sys_package display_value="YAML JSON Conversion" source="x_radi_yaml_json">cbe7f1881b471854aed775561a4bcbc7</sys_package><sys_policy/><sys_scope display_value="YAML JSON Conversion">cbe7f1881b471854aed775561a4bcbc7</sys_scope><sys_update_name>sys_scope_privilege_61f9b94c1b471854aed775561a4bcb03</sys_update_name><sys_updated_by>jon</sys_updated_by><sys_updated_on>2020-08-30 19:10:49</sys_updated_on><target_name>ScriptableRESTMessageClient.setRequestHeader</target_name><target_scope display_value="Global">global</target_scope><target_type>scriptable</target_type></sys_scope_privilege></record_update>]]></payload>
<payload_hash>28566945</payload_hash>
<remote_update_set display_value="YAML JSON Conversion - 1.0.2">eccf469cdb103c102ed422e648961943</remote_update_set>
<replace_on_upgrade>false</replace_on_upgrade>
<sys_created_by>jon@rapdev.io</sys_created_by>
<sys_created_on>2021-05-19 14:54:11</sys_created_on>
<sys_id>6ccf469cdb103c102ed422e648961945</sys_id>
<sys_mod_count>0</sys_mod_count>
<sys_recorded_at>179851e34670000001</sys_recorded_at>
<sys_updated_by>jon@rapdev.io</sys_updated_by>
<sys_updated_on>2021-05-19 14:54:11</sys_updated_on>
<table/>
<target_name>ScriptableRESTMessageClient.setRequestHeader</target_name>
<type>Cross scope privilege</type>
<update_domain>global</update_domain>
<update_guid>e1f9b94c8c471854159c93cf74993204</update_guid>
<update_guid_history>e1f9b94c8c471854159c93cf74993204:28566945</update_guid_history>
<update_set display_value=""/>
<view/>
</sys_update_xml>
<sys_update_xml action="INSERT_OR_UPDATE">
<action>INSERT_OR_UPDATE</action>
<application display_value="YAML JSON Conversion">cbe7f1881b471854aed775561a4bcbc7</application>
<category>customer</category>
<comments/>
<name>sys_script_include_22d8310c1b471854aed775561a4bcb8f</name>
<payload>&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;record_update table="sys_script_include"&gt;&lt;sys_script_include action="INSERT_OR_UPDATE"&gt;&lt;access&gt;package_private&lt;/access&gt;&lt;active&gt;true&lt;/active&gt;&lt;api_name&gt;x_radi_yaml_json.Unescaper&lt;/api_name&gt;&lt;caller_access/&gt;&lt;client_callable&gt;false&lt;/client_callable&gt;&lt;description&gt;Parses escaped characters and strings within YAML data.&lt;/description&gt;&lt;name&gt;Unescaper&lt;/name&gt;&lt;script&gt;&lt;![CDATA[/*
Modifed from https://github.com/jeremyfa/yaml.js

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is furnished
to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE.
*/

var Unescaper = Class.create();
Unescaper.prototype = {
    initialize: function() {
		this.PATTERN_ESCAPED_CHARACTER = new Pattern('\\\\([0abt\tnvfre "\\/\\\\N_LP]|x[0-9a-fA-F]{2}|u[0-9a-fA-F]{4}|U[0-9a-fA-F]{8})');
		this.Utils = new Utils();
    },

	unescapeSingleQuotedString: function(value) {
		return value.replace(/\'\'/g, '\'');
    },

    // Unescapes a double quoted string.

    // @param [String]       value A double quoted string.

    // @return [String]      The unescaped string.

    unescapeDoubleQuotedString: function(value) {
		if (this._unescapeCallback == null) {
			this._unescapeCallback = function(str) {
				return this.unescapeCharacter(str);
			};
		}
		// Evaluate the string
		return this.PATTERN_ESCAPED_CHARACTER.replace(value, this._unescapeCallback);
    },

    // Unescapes a character that was found in a double-quoted string

    // @param [String]       value An escaped character

    // @return [String]      The unescaped character

    unescapeCharacter: function(value) {
		var ch;
		ch = String.fromCharCode;
		switch (value.charAt(1)) {
			case '0':
				return ch(0);
			case 'a':
				return ch(7);
			case 'b':
				return ch(8);
			case 't':
				return "\t";
			case "\t":
				return "\t";
			case 'n':
				return "\n";
			case 'v':
				return ch(11);
			case 'f':
				return ch(12);
			case 'r':
				return ch(13);
			case 'e':
				return ch(27);
			case ' ':
				return ' ';
			case '"':
				return '"';
			case '/':
				return '/';
			case '\\':
				return '\\';
			case 'N':
				// U+0085 NEXT LINE
				return ch(0x0085);
			case '_':
				// U+00A0 NO-BREAK SPACE
				return ch(0x00A0);
			case 'L':
				// U+2028 LINE SEPARATOR
				return ch(0x2028);
			case 'P':
				// U+2029 PARAGRAPH SEPARATOR
				return ch(0x2029);
			case 'x':
				return this.Utils.utf8chr(this.Utils.hexDec(value.substr(2, 2)));
			case 'u':
				return this.Utils.utf8chr(this.Utils.hexDec(value.substr(2, 4)));
			case 'U':
				return this.Utils.utf8chr(this.Utils.hexDec(value.substr(2, 8)));
			default:
				return '';
      }
    },
	
    type: 'Unescaper'
};]]&gt;&lt;/script&gt;&lt;sys_class_name&gt;sys_script_include&lt;/sys_class_name&gt;&lt;sys_created_by&gt;jon&lt;/sys_created_by&gt;&lt;sys_created_on&gt;2020-08-30 19:06:50&lt;/sys_created_on&gt;&lt;sys_id&gt;22d8310c1b471854aed775561a4bcb8f&lt;/sys_id&gt;&lt;sys_mod_count&gt;6&lt;/sys_mod_count&gt;&lt;sys_name&gt;Unescaper&lt;/sys_name&gt;&lt;sys_package display_value="YAML JSON Conversion" source="x_radi_yaml_json"&gt;cbe7f1881b471854aed775561a4bcbc7&lt;/sys_package&gt;&lt;sys_policy&gt;read&lt;/sys_policy&gt;&lt;sys_scope display_value="YAML JSON Conversion"&gt;cbe7f1881b471854aed775561a4bcbc7&lt;/sys_scope&gt;&lt;sys_update_name&gt;sys_script_include_22d8310c1b471854aed775561a4bcb8f&lt;/sys_update_name&gt;&lt;sys_updated_by&gt;reese@rapdev.io&lt;/sys_updated_by&gt;&lt;sys_updated_on&gt;2021-05-05 18:14:05&lt;/sys_updated_on&gt;&lt;/sys_script_include&gt;&lt;/record_update&gt;</payload>
<payload_hash>-587316948</payload_hash>
<remote_update_set display_value="YAML JSON Conversion - 1.0.2">eccf469cdb103c102ed422e648961943</remote_update_set>
<replace_on_upgrade>false</replace_on_upgrade>
<sys_created_by>jon@rapdev.io</sys_created_by>
<sys_created_on>2021-05-19 14:54:11</sys_created_on>
<sys_id>a0cf469cdb103c102ed422e648961947</sys_id>
<sys_mod_count>0</sys_mod_count>
<sys_recorded_at>179851e35240000001</sys_recorded_at>
<sys_updated_by>jon@rapdev.io</sys_updated_by>
<sys_updated_on>2021-05-19 14:54:11</sys_updated_on>
<table/>
<target_name>Unescaper</target_name>
<type>Script Include</type>
<update_domain>global</update_domain>
<update_guid>9447b2332b33e45054f56ba96477a8ec</update_guid>
<update_guid_history>9447b2332b33e45054f56ba96477a8ec:-587316948,4cb42107d4a7a8501cc341d37cbb545c:128547028,a05bb9ccb2471854e6eb456ee7e7e725:153933808,424b75cc1c471854ba05dd25bc4a7132:774666776,8aa9b14c4447185474a7af17aab53370:1217144696,a0a9754c2b47185412d8fa7bafb58e51:-1782068601,8b09750c56471854f1e87904caba9f94:1217144696</update_guid_history>
<update_set display_value=""/>
<view/>
</sys_update_xml>
<sys_update_xml action="INSERT_OR_UPDATE">
<action>INSERT_OR_UPDATE</action>
<application display_value="YAML JSON Conversion">cbe7f1881b471854aed775561a4bcbc7</application>
<category>customer</category>
<comments/>
<name>sys_scope_privilege_a1f93d4c1b471854aed775561a4bcb12</name>
<payload><![CDATA[<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_scope_privilege"><sys_scope_privilege action="INSERT_OR_UPDATE"><operation>execute</operation><source_scope display_value="YAML JSON Conversion">cbe7f1881b471854aed775561a4bcbc7</source_scope><status>allowed</status><sys_class_name>sys_scope_privilege</sys_class_name><sys_created_by>jon</sys_created_by><sys_created_on>2020-08-30 19:10:49</sys_created_on><sys_id>a1f93d4c1b471854aed775561a4bcb12</sys_id><sys_mod_count>0</sys_mod_count><sys_name>ScriptableRESTResponse.getBody</sys_name><sys_package display_value="YAML JSON Conversion" source="x_radi_yaml_json">cbe7f1881b471854aed775561a4bcbc7</sys_package><sys_policy/><sys_scope display_value="YAML JSON Conversion">cbe7f1881b471854aed775561a4bcbc7</sys_scope><sys_update_name>sys_scope_privilege_a1f93d4c1b471854aed775561a4bcb12</sys_update_name><sys_updated_by>jon</sys_updated_by><sys_updated_on>2020-08-30 19:10:49</sys_updated_on><target_name>ScriptableRESTResponse.getBody</target_name><target_scope display_value="Global">global</target_scope><target_type>scriptable</target_type></sys_scope_privilege></record_update>]]></payload>
<payload_hash>1522139265</payload_hash>
<remote_update_set display_value="YAML JSON Conversion - 1.0.2">eccf469cdb103c102ed422e648961943</remote_update_set>
<replace_on_upgrade>false</replace_on_upgrade>
<sys_created_by>jon@rapdev.io</sys_created_by>
<sys_created_on>2021-05-19 14:54:11</sys_created_on>
<sys_id>a4cf469cdb103c102ed422e648961946</sys_id>
<sys_mod_count>0</sys_mod_count>
<sys_recorded_at>179851e2ec90000001</sys_recorded_at>
<sys_updated_by>jon@rapdev.io</sys_updated_by>
<sys_updated_on>2021-05-19 14:54:11</sys_updated_on>
<table/>
<target_name>ScriptableRESTResponse.getBody</target_name>
<type>Cross scope privilege</type>
<update_domain>global</update_domain>
<update_guid>25f93d4c6947185433c96cbfb6a46613</update_guid>
<update_guid_history>25f93d4c6947185433c96cbfb6a46613:1522139265</update_guid_history>
<update_set display_value=""/>
<view/>
</sys_update_xml>
<sys_update_xml action="INSERT_OR_UPDATE">
<action>INSERT_OR_UPDATE</action>
<application display_value="YAML JSON Conversion">cbe7f1881b471854aed775561a4bcbc7</application>
<category>customer</category>
<comments/>
<name>sys_scope_privilege_2df9b94c1b471854aed775561a4bcb00</name>
<payload><![CDATA[<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_scope_privilege"><sys_scope_privilege action="INSERT_OR_UPDATE"><operation>execute</operation><source_scope display_value="YAML JSON Conversion">cbe7f1881b471854aed775561a4bcbc7</source_scope><status>allowed</status><sys_class_name>sys_scope_privilege</sys_class_name><sys_created_by>jon</sys_created_by><sys_created_on>2020-08-30 19:10:49</sys_created_on><sys_id>2df9b94c1b471854aed775561a4bcb00</sys_id><sys_mod_count>0</sys_mod_count><sys_name>ScriptableRESTMessageClient.setEndpoint</sys_name><sys_package display_value="YAML JSON Conversion" source="x_radi_yaml_json">cbe7f1881b471854aed775561a4bcbc7</sys_package><sys_policy/><sys_scope display_value="YAML JSON Conversion">cbe7f1881b471854aed775561a4bcbc7</sys_scope><sys_update_name>sys_scope_privilege_2df9b94c1b471854aed775561a4bcb00</sys_update_name><sys_updated_by>jon</sys_updated_by><sys_updated_on>2020-08-30 19:10:49</sys_updated_on><target_name>ScriptableRESTMessageClient.setEndpoint</target_name><target_scope display_value="Global">global</target_scope><target_type>scriptable</target_type></sys_scope_privilege></record_update>]]></payload>
<payload_hash>-204509755</payload_hash>
<remote_update_set display_value="YAML JSON Conversion - 1.0.2">eccf469cdb103c102ed422e648961943</remote_update_set>
<replace_on_upgrade>false</replace_on_upgrade>
<sys_created_by>jon@rapdev.io</sys_created_by>
<sys_created_on>2021-05-19 14:54:11</sys_created_on>
<sys_id>a8cf469cdb103c102ed422e648961945</sys_id>
<sys_mod_count>0</sys_mod_count>
<sys_recorded_at>179851e34530000001</sys_recorded_at>
<sys_updated_by>jon@rapdev.io</sys_updated_by>
<sys_updated_on>2021-05-19 14:54:11</sys_updated_on>
<table/>
<target_name>ScriptableRESTMessageClient.setEndpoint</target_name>
<type>Cross scope privilege</type>
<update_domain>global</update_domain>
<update_guid>adf9b94c3a471854a90ec5a9f3bb1901</update_guid>
<update_guid_history>adf9b94c3a471854a90ec5a9f3bb1901:-204509755</update_guid_history>
<update_set display_value=""/>
<view/>
</sys_update_xml>
<sys_update_xml action="INSERT_OR_UPDATE">
<action>INSERT_OR_UPDATE</action>
<application display_value="YAML JSON Conversion">cbe7f1881b471854aed775561a4bcbc7</application>
<category>customer</category>
<comments/>
<name>sys_user_role_ec3f3e3bdb33e4502ed422e648961940</name>
<payload><![CDATA[<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_user_role"><sys_user_role action="INSERT_OR_UPDATE"><assignable_by/><can_delegate>true</can_delegate><description/><elevated_privilege>false</elevated_privilege><grantable>true</grantable><includes_roles/><name>x_radi_yaml_json.user</name><requires_subscription>-1</requires_subscription><scoped_admin>false</scoped_admin><suffix>user</suffix><sys_class_name>sys_user_role</sys_class_name><sys_created_by>reese@rapdev.io</sys_created_by><sys_created_on>2021-05-05 18:48:59</sys_created_on><sys_id>ec3f3e3bdb33e4502ed422e648961940</sys_id><sys_mod_count>0</sys_mod_count><sys_name>x_radi_yaml_json.user</sys_name><sys_package display_value="YAML JSON Conversion" source="x_radi_yaml_json">cbe7f1881b471854aed775561a4bcbc7</sys_package><sys_policy/><sys_scope display_value="YAML JSON Conversion">cbe7f1881b471854aed775561a4bcbc7</sys_scope><sys_update_name>sys_user_role_ec3f3e3bdb33e4502ed422e648961940</sys_update_name><sys_updated_by>reese@rapdev.io</sys_updated_by><sys_updated_on>2021-05-05 18:48:59</sys_updated_on></sys_user_role></record_update>]]></payload>
<payload_hash>1008737912</payload_hash>
<remote_update_set display_value="YAML JSON Conversion - 1.0.2">eccf469cdb103c102ed422e648961943</remote_update_set>
<replace_on_upgrade>false</replace_on_upgrade>
<sys_created_by>jon@rapdev.io</sys_created_by>
<sys_created_on>2021-05-19 14:54:11</sys_created_on>
<sys_id>a8cf469cdb103c102ed422e648961948</sys_id>
<sys_mod_count>0</sys_mod_count>
<sys_recorded_at>179851e35920000001</sys_recorded_at>
<sys_updated_by>jon@rapdev.io</sys_updated_by>
<sys_updated_on>2021-05-19 14:54:11</sys_updated_on>
<table/>
<target_name>x_radi_yaml_json.user</target_name>
<type>Role</type>
<update_domain>global</update_domain>
<update_guid>973ffaf76533e450b74464cef615aea0</update_guid>
<update_guid_history>973ffaf76533e450b74464cef615aea0:1008737912</update_guid_history>
<update_set display_value=""/>
<view/>
</sys_update_xml>
<sys_update_xml action="INSERT_OR_UPDATE">
<action>INSERT_OR_UPDATE</action>
<application display_value="YAML JSON Conversion">cbe7f1881b471854aed775561a4bcbc7</application>
<category>customer</category>
<comments/>
<name>sys_app_module_a16be6b7dbffa4502ed422e648961978</name>
<payload><![CDATA[<?xml version="1.0" encoding="UTF-8"?><record_update sys_domain="global" table="sys_app_module"><sys_app_module action="INSERT_OR_UPDATE"><active>true</active><application display_value="YAML JSON Conversion">17242effdbbfa4502ed422e64896199d</application><assessment/><content_page/><device_type/><filter/><hint/><homepage/><image/><link_type>DIRECT</link_type><map_page/><mobile_title>Contact Support</mobile_title><mobile_view_name>Mobile</mobile_view_name><name/><order/><override_menu_roles>false</override_menu_roles><query>/x_radi_yaml_json_rapdev_support.do</query><report/><roles/><survey/><survey_overwrite>true</survey_overwrite><sys_class_name>sys_app_module</sys_class_name><sys_created_by>reese@rapdev.io</sys_created_by><sys_created_on>2021-05-05 17:31:25</sys_created_on><sys_domain>global</sys_domain><sys_domain_path>/</sys_domain_path><sys_id>a16be6b7dbffa4502ed422e648961978</sys_id><sys_mod_count>0</sys_mod_count><sys_name>Contact Support</sys_name><sys_overrides/><sys_package display_value="YAML JSON Conversion" source="x_radi_yaml_json">cbe7f1881b471854aed775561a4bcbc7</sys_package><sys_policy/><sys_scope display_value="YAML JSON Conversion">cbe7f1881b471854aed775561a4bcbc7</sys_scope><sys_update_name>sys_app_module_a16be6b7dbffa4502ed422e648961978</sys_update_name><sys_updated_by>reese@rapdev.io</sys_updated_by><sys_updated_on>2021-05-05 17:31:25</sys_updated_on><timeline_page/><title>Contact Support</title><uncancelable>false</uncancelable><view_name/><window_name/></sys_app_module></record_update>]]></payload>
<payload_hash>-1662605423</payload_hash>
<remote_update_set display_value="YAML JSON Conversion - 1.0.2">eccf469cdb103c102ed422e648961943</remote_update_set>
<replace_on_upgrade>false</replace_on_upgrade>
<sys_created_by>jon@rapdev.io</sys_created_by>
<sys_created_on>2021-05-19 14:54:11</sys_created_on>
<sys_id>accf469cdb103c102ed422e648961944</sys_id>
<sys_mod_count>0</sys_mod_count>
<sys_recorded_at>179851e34c90000001</sys_recorded_at>
<sys_updated_by>jon@rapdev.io</sys_updated_by>
<sys_updated_on>2021-05-19 14:54:11</sys_updated_on>
<table/>
<target_name>Contact Support</target_name>
<type>Module</type>
<update_domain>global</update_domain>
<update_guid>5b7d223b97ffa4508f096c036da63bf9</update_guid>
<update_guid_history>5b7d223b97ffa4508f096c036da63bf9:26380652</update_guid_history>
<update_set display_value=""/>
<view/>
</sys_update_xml>
<sys_update_xml action="INSERT_OR_UPDATE">
<action>INSERT_OR_UPDATE</action>
<application display_value="YAML JSON Conversion">cbe7f1881b471854aed775561a4bcbc7</application>
<category>customer</category>
<comments/>
<name>sys_script_include_f9d8710c1b471854aed775561a4bcb73</name>
<payload>&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;record_update table="sys_script_include"&gt;&lt;sys_script_include action="INSERT_OR_UPDATE"&gt;&lt;access&gt;package_private&lt;/access&gt;&lt;active&gt;true&lt;/active&gt;&lt;api_name&gt;x_radi_yaml_json.Pattern&lt;/api_name&gt;&lt;caller_access/&gt;&lt;client_callable&gt;false&lt;/client_callable&gt;&lt;description&gt;Used to create RegExp object with regex pattern passed to this script.&lt;/description&gt;&lt;name&gt;Pattern&lt;/name&gt;&lt;script&gt;&lt;![CDATA[/*
Modifed from https://github.com/jeremyfa/yaml.js

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is furnished
to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE.
*/

var Pattern = Class.create();

Pattern.prototype = {
	// @property [RegExp] The RegExp instance
	regex: null,
	// @property [String] The raw regex string
	rawRegex: null,
	// @property [String] The cleaned regex string (used to create the RegExp instance)
	cleanedRegex: null,
	// @property [Object] The dictionary mapping names to capturing bracket numbers
	mapping: null,
    initialize: function(rawRegex, modifiers) {
		if(modifiers == undefined) {
			modifiers = '';
		}
		var _char, capturingBracketNumber, cleanedRegex, i, len, mapping, name, part, subChar;
		cleanedRegex = '';
		len = rawRegex.length;
		mapping = null;
		// Cleanup raw regex and compute mapping
		capturingBracketNumber = 0;
		i = 0;
		while (i &lt; len) {
			_char = rawRegex.charAt(i);
			if (_char === '\\') {
				// Ignore next character
				cleanedRegex += rawRegex.slice(i, +(i + 1) + 1 || 9e9);
				i++;
			} else if (_char === '(') {
				// Increase bracket number, only if it is capturing
				if (i &lt; len - 2) {
					part = rawRegex.slice(i, +(i + 2) + 1 || 9e9);
					if (part === '(?:') {
						// Non-capturing bracket
						i += 2;
						cleanedRegex += part;
					} else if (part === '(?&lt;') {
						// Capturing bracket with possibly a name
						capturingBracketNumber++;
						i += 2;
						name = '';
						while (i + 1 &lt; len) {
							subChar = rawRegex.charAt(i + 1);
							if (subChar === '&gt;') {
								cleanedRegex += '(';
								i++;
								if (name.length &gt; 0) {
									// Associate a name with a capturing bracket number
									if (mapping == null) {
										mapping = {};
									}
									mapping[name] = capturingBracketNumber;
								}
								break;
							} else {
								name += subChar;
							}
							i++;
						}
					} else {
						cleanedRegex += _char;
						capturingBracketNumber++;
					}
				} else {
					cleanedRegex += _char;
				}
			} else {
				cleanedRegex += _char;
			}
			i++;
		}
		this.rawRegex = rawRegex;
		this.cleanedRegex = cleanedRegex;
		this.regex = new RegExp(this.cleanedRegex, 'g' + modifiers.replace('g', ''));
		this.mapping = mapping;
    },
	
	// Executes the pattern's regex and returns the matching values

    // @param [String] str The string to use to execute the pattern

    // @return [Array] The matching values extracted from capturing brackets or null if nothing matched

    exec: function(str) {
		var index, matches, name, ref;
		this.regex.lastIndex = 0;
		matches = this.regex.exec(str);
		if (matches == null) {
			return null;
		}
		if (this.mapping != null) {
			ref = this.mapping;
			for (name in ref) {
				index = ref[name];
				matches[name] = matches[index];
			}
		}
		return matches;
    },
	
	// Tests the pattern's regex

    // @param [String] str The string to use to test the pattern

    // @return [Boolean] true if the string matched

    test: function(str) {
		this.regex.lastIndex = 0;
		return this.regex.test(str);
    },
	
	// Replaces occurences matching with the pattern's regex with replacement

    // @param [String] str The source string to perform replacements
    // @param [String] replacement The string to use in place of each replaced occurence.

    // @return [String] The replaced string

    replace: function(str, replacement) {
		this.regex.lastIndex = 0;
		return str.replace(this.regex, replacement);
    },
	
	// Replaces occurences matching with the pattern's regex with replacement and
    // get both the replaced string and the number of replaced occurences in the string.

    // @param [String] str The source string to perform replacements
    // @param [String] replacement The string to use in place of each replaced occurence.
    // @param [Integer] limit The maximum number of occurences to replace (0 means infinite number of occurences)

    // @return [Array] A destructurable array containing the replaced string and the number of replaced occurences. For instance: ["my replaced string", 2]

    replaceAll: function(str, replacement, limit) {
		if(limit == undefined) {
			limit = 0;
		}
		var count;
		this.regex.lastIndex = 0;
		count = 0;
		while (this.regex.test(str) &amp;&amp; (limit === 0 || count &lt; limit)) {
			this.regex.lastIndex = 0;
			str = str.replace(this.regex, replacement);
			count++;
		}
		return [str, count];
    },

    type: 'Pattern'
};]]&gt;&lt;/script&gt;&lt;sys_class_name&gt;sys_script_include&lt;/sys_class_name&gt;&lt;sys_created_by&gt;jon&lt;/sys_created_by&gt;&lt;sys_created_on&gt;2020-08-30 19:06:12&lt;/sys_created_on&gt;&lt;sys_id&gt;f9d8710c1b471854aed775561a4bcb73&lt;/sys_id&gt;&lt;sys_mod_count&gt;3&lt;/sys_mod_count&gt;&lt;sys_name&gt;Pattern&lt;/sys_name&gt;&lt;sys_package display_value="YAML JSON Conversion" source="x_radi_yaml_json"&gt;cbe7f1881b471854aed775561a4bcbc7&lt;/sys_package&gt;&lt;sys_policy&gt;read&lt;/sys_policy&gt;&lt;sys_scope display_value="YAML JSON Conversion"&gt;cbe7f1881b471854aed775561a4bcbc7&lt;/sys_scope&gt;&lt;sys_update_name&gt;sys_script_include_f9d8710c1b471854aed775561a4bcb73&lt;/sys_update_name&gt;&lt;sys_updated_by&gt;reese@rapdev.io&lt;/sys_updated_by&gt;&lt;sys_updated_on&gt;2021-05-05 18:19:08&lt;/sys_updated_on&gt;&lt;/sys_script_include&gt;&lt;/record_update&gt;</payload>
<payload_hash>521007194</payload_hash>
<remote_update_set display_value="YAML JSON Conversion - 1.0.2">eccf469cdb103c102ed422e648961943</remote_update_set>
<replace_on_upgrade>false</replace_on_upgrade>
<sys_created_by>jon@rapdev.io</sys_created_by>
<sys_created_on>2021-05-19 14:54:11</sys_created_on>
<sys_id>accf469cdb103c102ed422e648961947</sys_id>
<sys_mod_count>0</sys_mod_count>
<sys_recorded_at>179851e353c0000001</sys_recorded_at>
<sys_updated_by>jon@rapdev.io</sys_updated_by>
<sys_updated_on>2021-05-19 14:54:11</sys_updated_on>
<table/>
<target_name>Pattern</target_name>
<type>Script Include</type>
<update_domain>global</update_domain>
<update_guid>da68b6334933e450fc8e686e85cbc44a</update_guid>
<update_guid_history>da68b6334933e450fc8e686e85cbc44a:521007194,e6a4edc325a7a85005d71c48eb086111:763336405,90f8750cba471854327d9e008cf57d55:1108424433,f9e8b10cf647185402b8f215a97c978b:333784115</update_guid_history>
<update_set display_value=""/>
<view/>
</sys_update_xml>
<sys_update_xml action="INSERT_OR_UPDATE">
<action>INSERT_OR_UPDATE</action>
<application display_value="YAML JSON Conversion">cbe7f1881b471854aed775561a4bcbc7</application>
<category>customer</category>
<comments/>
<name>sys_scope_privilege_91f9794c1b471854aed775561a4bcbfb</name>
<payload><![CDATA[<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_scope_privilege"><sys_scope_privilege action="INSERT_OR_UPDATE"><operation>execute</operation><source_scope display_value="YAML JSON Conversion">cbe7f1881b471854aed775561a4bcbc7</source_scope><status>allowed</status><sys_class_name>sys_scope_privilege</sys_class_name><sys_created_by>jon</sys_created_by><sys_created_on>2020-08-30 19:10:49</sys_created_on><sys_id>91f9794c1b471854aed775561a4bcbfb</sys_id><sys_mod_count>0</sys_mod_count><sys_name>ScriptableRESTMessageClient.setHttpMethod</sys_name><sys_package display_value="YAML JSON Conversion" source="x_radi_yaml_json">cbe7f1881b471854aed775561a4bcbc7</sys_package><sys_policy/><sys_scope display_value="YAML JSON Conversion">cbe7f1881b471854aed775561a4bcbc7</sys_scope><sys_update_name>sys_scope_privilege_91f9794c1b471854aed775561a4bcbfb</sys_update_name><sys_updated_by>jon</sys_updated_by><sys_updated_on>2020-08-30 19:10:49</sys_updated_on><target_name>ScriptableRESTMessageClient.setHttpMethod</target_name><target_scope display_value="Global">global</target_scope><target_type>scriptable</target_type></sys_scope_privilege></record_update>]]></payload>
<payload_hash>1077262557</payload_hash>
<remote_update_set display_value="YAML JSON Conversion - 1.0.2">eccf469cdb103c102ed422e648961943</remote_update_set>
<replace_on_upgrade>false</replace_on_upgrade>
<sys_created_by>jon@rapdev.io</sys_created_by>
<sys_created_on>2021-05-19 14:54:11</sys_created_on>
<sys_id>e0cf469cdb103c102ed422e648961946</sys_id>
<sys_mod_count>0</sys_mod_count>
<sys_recorded_at>179851e2eb40000001</sys_recorded_at>
<sys_updated_by>jon@rapdev.io</sys_updated_by>
<sys_updated_on>2021-05-19 14:54:11</sys_updated_on>
<table/>
<target_name>ScriptableRESTMessageClient.setHttpMethod</target_name>
<type>Cross scope privilege</type>
<update_domain>global</update_domain>
<update_guid>d1f9794c8d47185429cd1d53ad934cfd</update_guid>
<update_guid_history>d1f9794c8d47185429cd1d53ad934cfd:1077262557</update_guid_history>
<update_set display_value=""/>
<view/>
</sys_update_xml>
<sys_update_xml action="INSERT_OR_UPDATE">
<action>INSERT_OR_UPDATE</action>
<application display_value="YAML JSON Conversion">cbe7f1881b471854aed775561a4bcbc7</application>
<category>customer</category>
<comments/>
<name>sys_scope_privilege_2df93d4c1b471854aed775561a4bcb0f</name>
<payload><![CDATA[<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_scope_privilege"><sys_scope_privilege action="INSERT_OR_UPDATE"><operation>execute</operation><source_scope display_value="YAML JSON Conversion">cbe7f1881b471854aed775561a4bcbc7</source_scope><status>allowed</status><sys_class_name>sys_scope_privilege</sys_class_name><sys_created_by>jon</sys_created_by><sys_created_on>2020-08-30 19:10:49</sys_created_on><sys_id>2df93d4c1b471854aed775561a4bcb0f</sys_id><sys_mod_count>0</sys_mod_count><sys_name>ScriptableRESTMessageClient.execute</sys_name><sys_package display_value="YAML JSON Conversion" source="x_radi_yaml_json">cbe7f1881b471854aed775561a4bcbc7</sys_package><sys_policy/><sys_scope display_value="YAML JSON Conversion">cbe7f1881b471854aed775561a4bcbc7</sys_scope><sys_update_name>sys_scope_privilege_2df93d4c1b471854aed775561a4bcb0f</sys_update_name><sys_updated_by>jon</sys_updated_by><sys_updated_on>2020-08-30 19:10:49</sys_updated_on><target_name>ScriptableRESTMessageClient.execute</target_name><target_scope display_value="Global">global</target_scope><target_type>scriptable</target_type></sys_scope_privilege></record_update>]]></payload>
<payload_hash>415912073</payload_hash>
<remote_update_set display_value="YAML JSON Conversion - 1.0.2">eccf469cdb103c102ed422e648961943</remote_update_set>
<replace_on_upgrade>false</replace_on_upgrade>
<sys_created_by>jon@rapdev.io</sys_created_by>
<sys_created_on>2021-05-19 14:54:11</sys_created_on>
<sys_id>e4cf469cdb103c102ed422e648961945</sys_id>
<sys_mod_count>0</sys_mod_count>
<sys_recorded_at>179851e2ed40000001</sys_recorded_at>
<sys_updated_by>jon@rapdev.io</sys_updated_by>
<sys_updated_on>2021-05-19 14:54:11</sys_updated_on>
<table/>
<target_name>ScriptableRESTMessageClient.execute</target_name>
<type>Cross scope privilege</type>
<update_domain>global</update_domain>
<update_guid>adf93d4cb54718547d414ba58ebefa10</update_guid>
<update_guid_history>adf93d4cb54718547d414ba58ebefa10:415912073</update_guid_history>
<update_set display_value=""/>
<view/>
</sys_update_xml>
<sys_update_xml action="INSERT_OR_UPDATE">
<action>INSERT_OR_UPDATE</action>
<application display_value="YAML JSON Conversion">cbe7f1881b471854aed775561a4bcbc7</application>
<category>customer</category>
<comments/>
<name>sys_ui_page_b9a5e273dbffa4502ed422e6489619d3</name>
<payload>&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;record_update table="sys_ui_page"&gt;&lt;sys_ui_page action="INSERT_OR_UPDATE"&gt;&lt;category&gt;general&lt;/category&gt;&lt;client_script/&gt;&lt;description/&gt;&lt;direct&gt;false&lt;/direct&gt;&lt;endpoint&gt;x_radi_yaml_json_rapdev_support.do&lt;/endpoint&gt;&lt;html&gt;&lt;![CDATA[&lt;?xml version="1.0" encoding="utf-8" ?&gt;
&lt;j:jelly trim="false"
	xmlns:j="jelly:core"
	xmlns:g="glide"
	xmlns:j2="null"
	xmlns:g2="null"&gt;
	&lt;div class="container"&gt;
		&lt;h1&gt;
			&lt;strong&gt;RapDev.io&lt;/strong&gt;
		&lt;/h1&gt;
		&lt;div class="container"&gt;
			&lt;table class="table-sm table-responsive borderless"&gt;
				&lt;tr&gt;
					&lt;td&gt;
						&lt;h2&gt;Contact Us:&lt;/h2&gt;
					&lt;/td&gt;
				&lt;/tr&gt;
				&lt;tr&gt;
					&lt;td&gt;
						&lt;h3&gt;
							&lt;a rel="noopener noreferrer nofollow" href="https://www.servicenow.com/support/contact-support.html" target="_blank"&gt;rapdev.io&lt;/a&gt;
						&lt;/h3&gt;
					&lt;/td&gt;
				&lt;/tr&gt;
				&lt;tr&gt;
					&lt;td&gt;
						&lt;h3&gt;
							&lt;a href="mailto:chat@rapdev.io"&gt;chat@rapdev.io&lt;/a&gt;
						&lt;/h3&gt;
					&lt;/td&gt;
				&lt;/tr&gt;
			&lt;/table&gt;
		&lt;/div&gt;
	&lt;/div&gt;
&lt;/j:jelly&gt;]]&gt;&lt;/html&gt;&lt;name&gt;rapdev_support&lt;/name&gt;&lt;processing_script/&gt;&lt;sys_class_name&gt;sys_ui_page&lt;/sys_class_name&gt;&lt;sys_created_by&gt;reese@rapdev.io&lt;/sys_created_by&gt;&lt;sys_created_on&gt;2021-05-05 17:19:57&lt;/sys_created_on&gt;&lt;sys_id&gt;b9a5e273dbffa4502ed422e6489619d3&lt;/sys_id&gt;&lt;sys_mod_count&gt;3&lt;/sys_mod_count&gt;&lt;sys_name&gt;rapdev_support&lt;/sys_name&gt;&lt;sys_package display_value="YAML JSON Conversion" source="x_radi_yaml_json"&gt;cbe7f1881b471854aed775561a4bcbc7&lt;/sys_package&gt;&lt;sys_policy/&gt;&lt;sys_scope display_value="YAML JSON Conversion"&gt;cbe7f1881b471854aed775561a4bcbc7&lt;/sys_scope&gt;&lt;sys_update_name&gt;sys_ui_page_b9a5e273dbffa4502ed422e6489619d3&lt;/sys_update_name&gt;&lt;sys_updated_by&gt;reese@rapdev.io&lt;/sys_updated_by&gt;&lt;sys_updated_on&gt;2021-05-05 17:30:54&lt;/sys_updated_on&gt;&lt;/sys_ui_page&gt;&lt;/record_update&gt;</payload>
<payload_hash>2049395216</payload_hash>
<remote_update_set display_value="YAML JSON Conversion - 1.0.2">eccf469cdb103c102ed422e648961943</remote_update_set>
<replace_on_upgrade>false</replace_on_upgrade>
<sys_created_by>jon@rapdev.io</sys_created_by>
<sys_created_on>2021-05-19 14:54:11</sys_created_on>
<sys_id>e4cf469cdb103c102ed422e648961948</sys_id>
<sys_mod_count>0</sys_mod_count>
<sys_recorded_at>179851e34b40000001</sys_recorded_at>
<sys_updated_by>jon@rapdev.io</sys_updated_by>
<sys_updated_on>2021-05-19 14:54:11</sys_updated_on>
<table/>
<target_name>rapdev_support</target_name>
<type>UI Page</type>
<update_domain>global</update_domain>
<update_guid>635d223bc1ffa450bf76c7c0c6b3cd27</update_guid>
<update_guid_history>635d223bc1ffa450bf76c7c0c6b3cd27:2049395216,141d2eb7b8ffa45007f683b35ab4272b:1676260943,052be637fdffa450c427e4a2790c8499:-29933511,9bda267395ffa4509a704bb0b016f21c:2121202022</update_guid_history>
<update_set display_value=""/>
<view/>
</sys_update_xml>
<sys_update_xml action="INSERT_OR_UPDATE">
<action>INSERT_OR_UPDATE</action>
<application display_value="YAML JSON Conversion">cbe7f1881b471854aed775561a4bcbc7</application>
<category>customer</category>
<comments/>
<name>sys_app_cbe7f1881b471854aed775561a4bcbc7</name>
<payload><![CDATA[<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_app"><sys_app action="INSERT_OR_UPDATE"><active>true</active><can_edit_in_studio>false</can_edit_in_studio><enforce_license>log</enforce_license><guided_setup_guid/><hide_on_ui>false</hide_on_ui><installed_as_dependency>false</installed_as_dependency><js_level>helsinki_es5</js_level><licensable>true</licensable><license_category>none</license_category><license_definition/><license_model>none</license_model><logo/><menu/><name>YAML JSON Conversion</name><private>false</private><restrict_table_access>false</restrict_table_access><runtime_access_tracking>permissive</runtime_access_tracking><scope>x_radi_yaml_json</scope><scoped_administration>false</scoped_administration><short_description/><source>x_radi_yaml_json</source><store_correlation_id>REPOAPP0000386905</store_correlation_id><store_url>https://tpp.servicenow.com/sn_appstore_s</store_url><sys_class_name>sys_app</sys_class_name><sys_code/><sys_created_by>jon</sys_created_by><sys_created_on>2020-08-30 19:01:56</sys_created_on><sys_id>cbe7f1881b471854aed775561a4bcbc7</sys_id><sys_mod_count>5</sys_mod_count><sys_updated_by>jon@rapdev.io</sys_updated_by><sys_updated_on>2021-05-19 14:52:57</sys_updated_on><template/><trackable>true</trackable><uninstall_blocked>false</uninstall_blocked><user_role/><vendor/><vendor_prefix/><version>1.0.2</version></sys_app></record_update>]]></payload>
<payload_hash>-288469481</payload_hash>
<remote_update_set display_value="YAML JSON Conversion - 1.0.2">eccf469cdb103c102ed422e648961943</remote_update_set>
<replace_on_upgrade>false</replace_on_upgrade>
<sys_created_by>jon@rapdev.io</sys_created_by>
<sys_created_on>2021-05-19 14:54:11</sys_created_on>
<sys_id>e8cf469cdb103c102ed422e648961944</sys_id>
<sys_mod_count>0</sys_mod_count>
<sys_recorded_at>179851e2e9e0000001</sys_recorded_at>
<sys_updated_by>jon@rapdev.io</sys_updated_by>
<sys_updated_on>2021-05-19 14:54:11</sys_updated_on>
<table/>
<target_name>YAML JSON Conversion</target_name>
<type>Custom Application</type>
<update_domain>global</update_domain>
<update_guid>627f429c7c103c1002c6267091d7d43e</update_guid>
<update_guid_history>627f429c7c103c1002c6267091d7d43e:-288469481,ed03cf3f8133e450ff4f4104fe27cb3b:-618235242,376e7ef74c33e450faf50833dcd5618b:-856661849,ad7df58f892f64105cbaa448c6b60127:-1186427610,00c5654701a7a8506a3ba9b4e7404df2:606543181,9be7798807471854fc46b094c9152125:1426038310</update_guid_history>
<update_set display_value=""/>
<view/>
</sys_update_xml>
<sys_update_xml action="INSERT_OR_UPDATE">
<action>INSERT_OR_UPDATE</action>
<application display_value="YAML JSON Conversion">cbe7f1881b471854aed775561a4bcbc7</application>
<category>customer</category>
<comments/>
<name>sys_script_include_d7d8b10c1b471854aed775561a4bcb9e</name>
<payload>&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;record_update table="sys_script_include"&gt;&lt;sys_script_include action="INSERT_OR_UPDATE"&gt;&lt;access&gt;package_private&lt;/access&gt;&lt;active&gt;true&lt;/active&gt;&lt;api_name&gt;x_radi_yaml_json.Inline&lt;/api_name&gt;&lt;caller_access/&gt;&lt;client_callable&gt;false&lt;/client_callable&gt;&lt;description&gt;Used to parse inline-formatted YAML data.&lt;/description&gt;&lt;name&gt;Inline&lt;/name&gt;&lt;script&gt;&lt;![CDATA[/*
Modifed from https://github.com/jeremyfa/yaml.js

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is furnished
to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE.
*/

var Inline = Class.create();
Inline.prototype = {
	// Quoted string regular expression
	REGEX_QUOTED_STRING: '(?:"(?:[^"\\\\]*(?:\\\\.[^"\\\\]*)*)"|\'(?:[^\']*(?:\'\'[^\']*)*)\')',
	// Pre-compiled patterns
	PATTERN_TRAILING_COMMENTS: new Pattern('^\\s*#.*$'),
	PATTERN_QUOTED_SCALAR: new Pattern('^' + Inline.REGEX_QUOTED_STRING),
	PATTERN_THOUSAND_NUMERIC_SCALAR: new Pattern('^(-|\\+)?[0-9,]+(\\.[0-9]+)?$'),
	PATTERN_SCALAR_BY_DELIMITERS: {},
	settings: {},
	Utils: new Utils(),
	Unescaper: new Unescaper(),
	
    initialize: function() {
    },
	
	// Configure YAML inline.

    // @param [Boolean]  exceptionOnInvalidType  true if an exception must be thrown on invalid types (a JavaScript resource or object), false otherwise
    // @param [Function] objectDecoder           A function to deserialize custom objects, null otherwise

    configure: function(exceptionOnInvalidType, objectDecoder) {
		if(exceptionOnInvalidType == undefined) {
			exceptionOnInvalidType = null;
		}
		if(objectDecoder == undefined) {
			objectDecoder =  null;
		}
		// Update settings
		this.settings.exceptionOnInvalidType = exceptionOnInvalidType;
		this.settings.objectDecoder = objectDecoder;
    },
	
	// Converts a YAML string to a JavaScript object.

    // @param [String]   value                   A YAML string
    // @param [Boolean]  exceptionOnInvalidType  true if an exception must be thrown on invalid types (a JavaScript resource or object), false otherwise
    // @param [Function] objectDecoder           A function to deserialize custom objects, null otherwise

    // @return [Object]  A JavaScript object representing the YAML string

    // @throw [ParseException]

    parse: function(value, exceptionOnInvalidType, objectDecoder) {
		if(exceptionOnInvalidType == undefined) {
			exceptionOnInvalidType = false;
		}
		if(objectDecoder == undefined) {
			objectDecoder = null;
		}
		var context, result;
		// Update settings from last call of Inline.parse()
		this.settings.exceptionOnInvalidType = exceptionOnInvalidType;
		this.settings.objectDecoder = objectDecoder;
		if (value == null) {
			return '';
		}
		value = this.Utils.trim(value);
		if (0 === value.length) {
			return '';
		}
		// Keep a context object to pass through static methods
		context = {
			exceptionOnInvalidType: this.settings.exceptionOnInvalidType,
			objectDecoder: this.settings.objectDecoder,
			i: 0
		};
		switch (value.charAt(0)) {
			case '[':
				result = this.parseSequence(value, context);
				++context.i;
				break;
			case '{':
				result = this.parseMapping(value, context);
				++context.i;
				break;
			default:
				result = this.parseScalar(value, null, ['"', "'"], context);
		}
		// Some comments are allowed at the end
		if (this.PATTERN_TRAILING_COMMENTS.replace(value.slice(context.i), '') !== '') {
			throw new ParseException('Unexpected characters near "' + value.slice(context.i) + '".');
		}
		return result;
    },
	
	// Dumps a given JavaScript variable to a YAML string.

    // @param [Object]   value                   The JavaScript variable to convert
    // @param [Boolean]  exceptionOnInvalidType  true if an exception must be thrown on invalid types (a JavaScript resource or object), false otherwise
    // @param [Function] objectEncoder           A function to serialize custom objects, null otherwise

    // @return [String]  The YAML string representing the JavaScript object

    // @throw [DumpException]

    dump: function(value, exceptionOnInvalidType, objectEncoder) {
		if(exceptionOnInvalidType == undefined) {
			exceptionOnInvalidType = false;
		}
		if(objectEncoder == undefined) {
			objectEncoder = null;
		}
		var ref, result, type;
		if (value == null) {
			return 'null';
		}
		type = typeof value;
		if (type === 'object') {
			if (value instanceof Date) {
				return value.toISOString();
			} else if (objectEncoder != null) {
				result = objectEncoder(value);
				if (typeof result === 'string' || (result != null)) {
					return result;
				}
			}
			return this.dumpObject(value);
		}
		if (type === 'boolean') {
			return (value ? 'true' : 'false');
		}
		if (this.Utils.isDigits(value)) {
			return (type === 'string' ? "'" + value + "'" : String(parseInt(value)));
		}
		if (this.Utils.isNumeric(value)) {
			return (type === 'string' ? "'" + value + "'" : String(parseFloat(value)));
		}
		if (type === 'number') {
			return (value === 2e308 ? '.Inf' : (value === -2e308 ? '-.Inf' : (isNaN(value) ? '.NaN' : value)));
		}
		if (Escaper.requiresDoubleQuoting(value)) {
			return Escaper.escapeWithDoubleQuotes(value);
		}
		if (Escaper.requiresSingleQuoting(value)) {
			return Escaper.escapeWithSingleQuotes(value);
		}
		if ('' === value) {
			return '""';
		}
		if (this.Utils.PATTERN_DATE.test(value)) {
			return "'" + value + "'";
		}
		if ((ref = value.toLowerCase()) === 'null' || ref === '~' || ref === 'true' || ref === 'false') {
			return "'" + value + "'";
		}
		// Default
		return value;
	},

	dumpObject: function(value, exceptionOnInvalidType, objectSupport) {
		if(objectSupport == undefined) {
			objectSupport = null;
		}
		var j, key, len1, output, val;
		// Array
		if (value instanceof Array) {
			output = [];
			for (j = 0, len1 = value.length; j &lt; len1; j++) {
				val = value[j];
				output.push(this.dump(val));
			}
			return '[' + output.join(', ') + ']';
		} else {
			// Mapping
			output = [];
			for (key in value) {
				val = value[key];
				output.push(this.dump(key) + ': ' + this.dump(val));
			}
			return '{' + output.join(', ') + '}';
		}
    },

    // Parses a scalar to a YAML string.

    // @param [Object]   scalar
    // @param [Array]    delimiters
    // @param [Array]    stringDelimiters
    // @param [Object]   context
    // @param [Boolean]  evaluate

    // @return [String]  A YAML string

    // @throw [ParseException] When malformed inline YAML string is parsed

    parseScalar: function(scalar, delimiters, stringDelimiters, context, evaluate) {
		if(delimiters == undefined) {
			delimiters = null;
		}
		if(stringDelimiters == undefined) {
			stringDelimiters = ['"', "'"];
		}
		if(context == undefined) {
			context = null;
		}
		if(evaluate == undefined) {
			evaluate = true;
		}
		var i, joinedDelimiters, match, output, pattern, ref, ref1, strpos, tmp;
		if (context == null) {
			context = {
				exceptionOnInvalidType: this.settings.exceptionOnInvalidType,
				objectDecoder: this.settings.objectDecoder,
				i: 0
			};
		}
		//({i} = context);
		i = context.i;
		if (ref = scalar.charAt(i), stringDelimiters.indexOf(ref) &gt;= 0) {
			// Quoted scalar
			output = this.parseQuotedScalar(scalar, context);
			//({i} = context);
			i = context.i;
			if (delimiters != null) {
				tmp = this.Utils.ltrim(scalar.slice(i), ' ');
				if (!(ref1 = tmp.charAt(0), delimiters.indexOf(ref1) &gt;= 0)) {
					throw new ParseException('Unexpected characters (' + scalar.slice(i) + ').');
				}
			}
		} else {
			// "normal" string
			if (!delimiters) {
				output = scalar.slice(i);
				i += output.length;
				// Remove comments
				strpos = output.indexOf(' #');
				if (strpos !== -1) {
					output = this.Utils.rtrim(output.slice(0, strpos));
				}
			} else {
				joinedDelimiters = delimiters.join('|');
				pattern = this.PATTERN_SCALAR_BY_DELIMITERS[joinedDelimiters];
				if (pattern == null) {
					pattern = new Pattern('^(.+?)(' + joinedDelimiters + ')');
					this.PATTERN_SCALAR_BY_DELIMITERS[joinedDelimiters] = pattern;
				}
				if (match = pattern.exec(scalar.slice(i))) {
					output = match[1];
					i += output.length;
				} else {
					throw new ParseException('Malformed inline YAML string (' + scalar + ').');
				}
			}
			if (evaluate) {
				output = this.evaluateScalar(output, context);
			}
		}
		context.i = i;
		return output;
    },
	
	// Parses a quoted scalar to YAML.

    // @param [String]   scalar
    // @param [Object]   context

    // @return [String]  A YAML string

    // @throw [ParseMore] When malformed inline YAML string is parsed

    parseQuotedScalar: function(scalar, context) {
		var i, match, output;
		//({i} = context);
		i = context.i;
		if (!(match = this.PATTERN_QUOTED_SCALAR.exec(scalar.slice(i)))) {
			throw new ParseMore('Malformed inline YAML string (' + scalar.slice(i) + ').');
		}
		output = match[0].substr(1, match[0].length - 2);
		if ('"' === scalar.charAt(i)) {
			output = this.Unescaper.unescapeDoubleQuotedString(output);
		} else {
			output = this.Unescaper.unescapeSingleQuotedString(output);
		}
		i += match[0].length;
		context.i = i;
		return output;
    },
	
	// Parses a sequence to a YAML string.

    // @param [String]   sequence
    // @param [Object]   context

    // @return [String]  A YAML string

    // @throw [ParseMore] When malformed inline YAML string is parsed

    parseSequence: function(sequence, context) {
		var e, i, isQuoted, len, output, ref, value;
		output = [];
		len = sequence.length;
		//({i} = context);
		i = context.i;
		i += 1;
		// [foo, bar, ...]
		while (i &lt; len) {
			context.i = i;
			switch (sequence.charAt(i)) {
				case '[':
					// Nested sequence
					output.push(this.parseSequence(sequence, context));
					//({i} = context);
					i = context.i;
					break;
				case '{':
					// Nested mapping
					output.push(this.parseMapping(sequence, context));
					//({i} = context);
					i = context.i;
					break;
				case ']':
					return output;
				case ',':
				case ' ':
				case "\n":
					break;
				default:
					// Do nothing
					isQuoted = ((ref = sequence.charAt(i)) === '"' || ref === "'");
					value = this.parseScalar(sequence, [',', ']'], ['"', "'"], context);
					//({i} = context);
					i = context.i;
					if (!isQuoted &amp;&amp; typeof value === 'string' &amp;&amp; (value.indexOf(': ') !== -1 || value.indexOf(":\n") !== -1)) {
						try {
							// Embedded mapping?
							value = this.parseMapping('{' + value + '}');
						} catch (error) {
							e = error;
						}
					}
					// No, it's not
					output.push(value);
					--i;
			}
			++i;
		}
		throw new ParseMore('Malformed inline YAML string ' + sequence);
    },
	
	// Parses a mapping to a YAML string.

    // @param [String]   mapping
    // @param [Object]   context

    // @return [String]  A YAML string

    // @throw [ParseMore] When malformed inline YAML string is parsed

    parseMapping: function(mapping, context) {
		var done, i, key, len, output, shouldContinueWhileLoop, value;
		output = {};
		len = mapping.length;
		//({i} = context);
		i = context.i;
		i += 1;
		// {foo: bar, bar:foo, ...}
		shouldContinueWhileLoop = false;
		while (i &lt; len) {
			context.i = i;
			switch (mapping.charAt(i)) {
				case ' ':
				case ',':
				case "\n":
					++i;
					context.i = i;
					shouldContinueWhileLoop = true;
					break;
				case '}':
					return output;
			}
			if (shouldContinueWhileLoop) {
				shouldContinueWhileLoop = false;
				continue;
			}
			// Key
			key = this.parseScalar(mapping, [':', ' ', "\n"], ['"', "'"], context, false);
			//({i} = context);
			i = context.i;
			// Value
			done = false;
			while (i &lt; len) {
				context.i = i;
				switch (mapping.charAt(i)) {
					case '[':
						// Nested sequence
						value = this.parseSequence(mapping, context);
						//({i} = context);
						i = context.i;
						// Spec: Keys MUST be unique; first one wins.
						// Parser cannot abort this mapping earlier, since lines
						// are processed sequentially.
						if (output[key] === void 0) {
							output[key] = value;
						}
						done = true;
						break;
					case '{':
						// Nested mapping
						value = this.parseMapping(mapping, context);
						//({i} = context);
						i = context.i;
						// Spec: Keys MUST be unique; first one wins.
						// Parser cannot abort this mapping earlier, since lines
						// are processed sequentially.
						if (output[key] === void 0) {
							output[key] = value;
						}
						done = true;
						break;
					case ':':
					case ' ':
					case "\n":
						break;
					default:
						// Do nothing
						value = this.parseScalar(mapping, [',', '}'], ['"', "'"], context);
						//({i} = context);
						i = context.i;
						// Spec: Keys MUST be unique; first one wins.
						// Parser cannot abort this mapping earlier, since lines
						// are processed sequentially.
						if (output[key] === void 0) {
							output[key] = value;
						}
						done = true;
						--i;
				}
				++i;
				if (done) {
					break;
				}
			}
		}
		throw new ParseMore('Malformed inline YAML string ' + mapping);
    },
	
	// Evaluates scalars and replaces magic values.

    // @param [String]   scalar

    // @return [String]  A YAML string

    evaluateScalar: function(scalar, context) {
		var cast, date, exceptionOnInvalidType, firstChar, firstSpace, firstWord, objectDecoder, raw, scalarLower, subValue, trimmedScalar;
		scalar = this.Utils.trim(scalar);
		scalarLower = scalar.toLowerCase();
		switch (scalarLower) {
			case 'null':
			case '':
			case '~':
				return null;
			case 'true':
				return true;
			case 'false':
				return false;
			case '.inf':
				return 2e308;
			case '.nan':
				return 0/0;
			case '-.inf':
				return 2e308;
			default:
				firstChar = scalarLower.charAt(0);
				switch (firstChar) {
					case '!':
						firstSpace = scalar.indexOf(' ');
						if (firstSpace === -1) {
							firstWord = scalarLower;
						} else {
							firstWord = scalarLower.slice(0, firstSpace);
						}
						switch (firstWord) {
							case '!':
								if (firstSpace !== -1) {
									return parseInt(this.parseScalar(scalar.slice(2)));
								}
								return null;
							case '!str':
								return this.Utils.ltrim(scalar.slice(4));
							case '!!str':
								return this.Utils.ltrim(scalar.slice(5));
							case '!!int':
								return parseInt(this.parseScalar(scalar.slice(5)));
							case '!!bool':
								return this.Utils.parseBoolean(this.parseScalar(scalar.slice(6)), false);
							case '!!float':
								return parseFloat(this.parseScalar(scalar.slice(7)));
							case '!!timestamp':
								return this.Utils.stringToDate(this.Utils.ltrim(scalar.slice(11)));
							default:
								if (context == null) {
									context = {
										exceptionOnInvalidType: this.settings.exceptionOnInvalidType,
										objectDecoder: this.settings.objectDecoder,
										i: 0
									};
								}
								//({objectDecoder, exceptionOnInvalidType} = context);
								objectDecoder = context.objectDecoder;
								exceptionOnInvalidType = context.exceptionOnInvalidType;
								if (objectDecoder) {
									// If objectDecoder function is given, we can do custom decoding of custom types
									trimmedScalar = this.Utils.rtrim(scalar);
									firstSpace = trimmedScalar.indexOf(' ');
									if (firstSpace === -1) {
										return objectDecoder(trimmedScalar, null);
									} else {
										subValue = this.Utils.ltrim(trimmedScalar.slice(firstSpace + 1));
										if (!(subValue.length &gt; 0)) {
											subValue = null;
										}
										return objectDecoder(trimmedScalar.slice(0, firstSpace), subValue);
									}
								}
								if (exceptionOnInvalidType) {
									throw new ParseException('Custom object support when parsing a YAML file has been disabled.');
								}
								return null;
						}
						break;
					case '0':
						if ('0x' === scalar.slice(0, 2)) {
							return this.Utils.hexDec(scalar);
						} else if (this.Utils.isDigits(scalar)) {
							return this.Utils.octDec(scalar);
						} else if (this.Utils.isNumeric(scalar)) {
							return parseFloat(scalar);
						} else {
							return scalar;
						}
						break;
					case '+':
						if (this.Utils.isDigits(scalar)) {
							raw = scalar;
							cast = parseInt(raw);
							if (raw === String(cast)) {
								return cast;
							} else {
								return raw;
							}
						} else if (this.Utils.isNumeric(scalar)) {
							return parseFloat(scalar);
						} else if (this.PATTERN_THOUSAND_NUMERIC_SCALAR.test(scalar)) {
							return parseFloat(scalar.replace(',', ''));
						}
						return scalar;
					case '-':
						if (this.Utils.isDigits(scalar.slice(1))) {
							if ('0' === scalar.charAt(1)) {
								return -this.Utils.octDec(scalar.slice(1));
							} else {
								raw = scalar.slice(1);
								cast = parseInt(raw);
								if (raw === String(cast)) {
									return -cast;
								} else {
									return -raw;
								}
							}
						} else if (this.Utils.isNumeric(scalar)) {
							return parseFloat(scalar);
						} else if (this.PATTERN_THOUSAND_NUMERIC_SCALAR.test(scalar)) {
							return parseFloat(scalar.replace(',', ''));
						}
						return scalar;
					default:
						if (date = this.Utils.stringToDate(scalar)) {
							return date;
						} else if (this.Utils.isNumeric(scalar)) {
							return parseFloat(scalar);
						} else if (this.PATTERN_THOUSAND_NUMERIC_SCALAR.test(scalar)) {
							return parseFloat(scalar.replace(',', ''));
						}
						return scalar;
				}
		}
    },

    type: 'Inline'
};]]&gt;&lt;/script&gt;&lt;sys_class_name&gt;sys_script_include&lt;/sys_class_name&gt;&lt;sys_created_by&gt;jon&lt;/sys_created_by&gt;&lt;sys_created_on&gt;2020-08-30 19:07:43&lt;/sys_created_on&gt;&lt;sys_id&gt;d7d8b10c1b471854aed775561a4bcb9e&lt;/sys_id&gt;&lt;sys_mod_count&gt;6&lt;/sys_mod_count&gt;&lt;sys_name&gt;Inline&lt;/sys_name&gt;&lt;sys_package display_value="YAML JSON Conversion" source="x_radi_yaml_json"&gt;cbe7f1881b471854aed775561a4bcbc7&lt;/sys_package&gt;&lt;sys_policy&gt;read&lt;/sys_policy&gt;&lt;sys_scope display_value="YAML JSON Conversion"&gt;cbe7f1881b471854aed775561a4bcbc7&lt;/sys_scope&gt;&lt;sys_update_name&gt;sys_script_include_d7d8b10c1b471854aed775561a4bcb9e&lt;/sys_update_name&gt;&lt;sys_updated_by&gt;reese@rapdev.io&lt;/sys_updated_by&gt;&lt;sys_updated_on&gt;2021-05-05 17:57:48&lt;/sys_updated_on&gt;&lt;/sys_script_include&gt;&lt;/record_update&gt;</payload>
<payload_hash>-1675328457</payload_hash>
<remote_update_set display_value="YAML JSON Conversion - 1.0.2">eccf469cdb103c102ed422e648961943</remote_update_set>
<replace_on_upgrade>false</replace_on_upgrade>
<sys_created_by>jon@rapdev.io</sys_created_by>
<sys_created_on>2021-05-19 14:54:11</sys_created_on>
<sys_id>e8cf469cdb103c102ed422e648961947</sys_id>
<sys_mod_count>0</sys_mod_count>
<sys_recorded_at>179851e34f10000001</sys_recorded_at>
<sys_updated_by>jon@rapdev.io</sys_updated_by>
<sys_updated_on>2021-05-19 14:54:11</sys_updated_on>
<table/>
<target_name>Inline</target_name>
<type>Script Include</type>
<update_domain>global</update_domain>
<update_guid>fd83be7f18ffa450eb93b0105e3f0809</update_guid>
<update_guid_history>fd83be7f18ffa450eb93b0105e3f0809:-1675328457,75c4a10731a7a850acc78f7b7bef2a8a:438149051,827b7dcccc4718545c3ffd10a1853d59:-1523877929,675b79cc4c471854844d1de70fc1450e:1571835223,823bf5cc8f471854e76a4595236a2945:452674255,331b7d8caa4718541e4f2b0b64822ae1:1729704587,0c49f50c75471854d859137d30108cc9:-820876550</update_guid_history>
<update_set display_value=""/>
<view/>
</sys_update_xml>
<sys_update_xml action="INSERT_OR_UPDATE">
<action>INSERT_OR_UPDATE</action>
<application display_value="YAML JSON Conversion">cbe7f1881b471854aed775561a4bcbc7</application>
<category>customer</category>
<comments/>
<name>sys_script_include_02d8710c1b471854aed775561a4bcb6c</name>
<payload>&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;record_update table="sys_script_include"&gt;&lt;sys_script_include action="INSERT_OR_UPDATE"&gt;&lt;access&gt;package_private&lt;/access&gt;&lt;active&gt;true&lt;/active&gt;&lt;api_name&gt;x_radi_yaml_json.Utils&lt;/api_name&gt;&lt;caller_access/&gt;&lt;client_callable&gt;false&lt;/client_callable&gt;&lt;description&gt;Utility class utilized by parser scripts for handling YAML elements.&lt;/description&gt;&lt;name&gt;Utils&lt;/name&gt;&lt;script&gt;&lt;![CDATA[/*
Modifed from https://github.com/jeremyfa/yaml.js

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is furnished
to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE.
*/

var Utils = Class.create();
var hasProp = {}.hasOwnProperty;
// Local timezone offset in ms
Utils.LOCAL_TIMEZONE_OFFSET = new Date().getTimezoneOffset() * 60 * 1000;
Utils.prototype = {
	REGEX_LEFT_TRIM_BY_CHAR: {},
	REGEX_RIGHT_TRIM_BY_CHAR: {},
	REGEX_SPACES: /\s+/g,
	REGEX_DIGITS: /^\d+$/,
	REGEX_OCTAL: /[^0-7]/gi,
	REGEX_HEXADECIMAL: /[^a-f0-9]/gi,
	// Precompiled date pattern
	PATTERN_DATE: new Pattern('^' + '(?&lt;year&gt;[0-9][0-9][0-9][0-9])' + '-(?&lt;month&gt;[0-9][0-9]?)' + '-(?&lt;day&gt;[0-9][0-9]?)' + '(?:(?:[Tt]|[ \t]+)' + '(?&lt;hour&gt;[0-9][0-9]?)' + ':(?&lt;minute&gt;[0-9][0-9])' + ':(?&lt;second&gt;[0-9][0-9])' + '(?:\.(?&lt;fraction&gt;[0-9]*))?' + '(?:[ \t]*(?&lt;tz&gt;Z|(?&lt;tz_sign&gt;[-+])(?&lt;tz_hour&gt;[0-9][0-9]?)' + '(?::(?&lt;tz_minute&gt;[0-9][0-9]))?))?)?' + '$', 'i'),
	// Local timezone offset in ms
	LOCAL_TIMEZONE_OFFSET: new Date().getTimezoneOffset() * 60 * 1000,
	
    initialize: function() {
    },

	// Trims the given string on both sides

    // @param [String] str The string to trim
    // @param [String] _char The character to use for trimming (default: '\\s')

    // @return [String] A trimmed string

    trim: function(str, _char) {
		if(_char == undefined) {
			_char = '\\s';
		}
		var regexLeft, regexRight;
		regexLeft = this.REGEX_LEFT_TRIM_BY_CHAR[_char];
		if (regexLeft == null) {
			this.REGEX_LEFT_TRIM_BY_CHAR[_char] = regexLeft = new RegExp('^' + _char + '' + _char + '*');
		}
		regexLeft.lastIndex = 0;
		regexRight = this.REGEX_RIGHT_TRIM_BY_CHAR[_char];
		if (regexRight == null) {
			this.REGEX_RIGHT_TRIM_BY_CHAR[_char] = regexRight = new RegExp(_char + '' + _char + '*$');
		}
		regexRight.lastIndex = 0;
		return str.replace(regexLeft, '').replace(regexRight, '');
    },
	
	// Trims the given string on the left side

    // @param [String] str The string to trim
    // @param [String] _char The character to use for trimming (default: '\\s')

    // @return [String] A trimmed string

    ltrim: function(str, _char) {
		if(_char == undefined) {
			_char = '\\s';
		}
		var regexLeft;
		regexLeft = this.REGEX_LEFT_TRIM_BY_CHAR[_char];
		if (regexLeft == null) {
			this.REGEX_LEFT_TRIM_BY_CHAR[_char] = regexLeft = new RegExp('^' + _char + '' + _char + '*');
		}
		regexLeft.lastIndex = 0;
		return str.replace(regexLeft, '');
    },
	
	// Trims the given string on the right side

    // @param [String] str The string to trim
    // @param [String] _char The character to use for trimming (default: '\\s')

    // @return [String] A trimmed string

    rtrim: function(str, _char) {
		if(_char == undefined) {
			_char = '\\s';
		}
		var regexRight;
		regexRight = this.REGEX_RIGHT_TRIM_BY_CHAR[_char];
		if (regexRight == null) {
			this.REGEX_RIGHT_TRIM_BY_CHAR[_char] = regexRight = new RegExp(_char + '' + _char + '*$');
		}
		regexRight.lastIndex = 0;
		return str.replace(regexRight, '');
    },
	
	// Checks if the given value is empty (null, undefined, empty string, string '0', empty Array, empty Object)

    // @param [Object] value The value to check

    // @return [Boolean] true if the value is empty

    isEmpty: function(value) {
		return !value || value === '' || value === '0' || (value instanceof Array &amp;&amp; value.length === 0) || this.isEmptyObject(value);
    },
	
	// Checks if the given value is an empty object

    // @param [Object] value The value to check

    // @return [Boolean] true if the value is empty and is an object

    isEmptyObject: function(value) {
		var k;
		return value instanceof Object &amp;&amp; ((function() {
			var results;
			results = [];
			for (k in value) {
				if (!hasProp.call(value, k)) continue;
				results.push(k);
			}
			return results;
		})()).length === 0;
    },
	
	// Counts the number of occurences of subString inside string

    // @param [String] string The string where to count occurences
    // @param [String] subString The subString to count
    // @param [Integer] start The start index
    // @param [Integer] length The string length until where to count

    // @return [Integer] The number of occurences

    subStrCount: function(string, subString, start, length) {
		var c, i, j, len, ref, sublen;
		c = 0;
		string = '' + string;
		subString = '' + subString;
		if (start != null) {
			string = string.slice(start);
		}
		if (length != null) {
			string = string.slice(0, length);
		}
		len = string.length;
		sublen = subString.length;
		for (i = j = 0, ref = len; (0 &lt;= ref ? j &lt; ref : j &gt; ref); i = 0 &lt;= ref ? ++j : --j) {
			if (subString === string.slice(i, sublen)) {
				c++;
				i += sublen - 1;
			}
		}
		return c;
    },
	
	// Returns true if input is only composed of digits

    // @param [Object] input The value to test

    // @return [Boolean] true if input is only composed of digits

    isDigits: function(input) {
		this.REGEX_DIGITS.lastIndex = 0;
		return this.REGEX_DIGITS.test(input);
    },

    // Decode octal value

    // @param [String] input The value to decode

    // @return [Integer] The decoded value

    octDec: function(input) {
		this.REGEX_OCTAL.lastIndex = 0;
		return parseInt((input + '').replace(this.REGEX_OCTAL, ''), 8);
    },

    // Decode hexadecimal value

    // @param [String] input The value to decode

    // @return [Integer] The decoded value

    hexDec: function(input) {
		this.REGEX_HEXADECIMAL.lastIndex = 0;
		input = this.trim(input);
		if ((input + '').slice(0, 2) === '0x') {
			input = (input + '').slice(2);
		}
		return parseInt((input + '').replace(this.REGEX_HEXADECIMAL, ''), 16);
    },

    // Get the UTF-8 character for the given code point.

    // @param [Integer] c The unicode code point

    // @return [String] The corresponding UTF-8 character

   utf8chr: function(c) {
	   var ch;
	   ch = String.fromCharCode;
	   if (0x80 &gt; (c %= 0x200000)) {
		   return ch(c);
	   }
	   if (0x800 &gt; c) {
		   return ch(0xC0 | c &gt;&gt; 6) + ch(0x80 | c &amp; 0x3F);
	   }
	   if (0x10000 &gt; c) {
		   return ch(0xE0 | c &gt;&gt; 12) + ch(0x80 | c &gt;&gt; 6 &amp; 0x3F) + ch(0x80 | c &amp; 0x3F);
	   }
	   return ch(0xF0 | c &gt;&gt; 18) + ch(0x80 | c &gt;&gt; 12 &amp; 0x3F) + ch(0x80 | c &gt;&gt; 6 &amp; 0x3F) + ch(0x80 | c &amp; 0x3F);
    },

    // Returns the boolean value equivalent to the given input

    // @param [String|Object]    input       The input value
    // @param [Boolean]          strict      If set to false, accept 'yes' and 'no' as boolean values

    // @return [Boolean]         the boolean value

    parseBoolean: function(input, strict) {
		if(strict == undefined) {
			strict = true;
		}
		var lowerInput;
		if (typeof input === 'string') {
			lowerInput = input.toLowerCase();
			if (!strict) {
				if (lowerInput === 'no') {
					return false;
				}
			}
			if (lowerInput === '0') {
				return false;
			}
			if (lowerInput === 'false') {
				return false;
			}
			if (lowerInput === '') {
				return false;
			}
			return true;
		}
		return !!input;
    },

    // Returns true if input is numeric

    // @param [Object] input The value to test

    // @return [Boolean] true if input is numeric

    isNumeric: function(input) {
		this.REGEX_SPACES.lastIndex = 0;
		return typeof input === 'number' || typeof input === 'string' &amp;&amp; !isNaN(input) &amp;&amp; input.replace(this.REGEX_SPACES, '') !== '';
    },

    // Returns a parsed date from the given string

    // @param [String] str The date string to parse

    // @return [Date] The parsed date or null if parsing failed

    stringToDate: function(str) {
		var date, day, fraction, hour, info, minute, month, second, tz_hour, tz_minute, tz_offset, year;
		if (!(str != null ? str.length : void 0)) {
			return null;
		}
		// Perform regular expression pattern
		info = this.PATTERN_DATE.exec(str);
		if (!info) {
			return null;
		}
		// Extract year, month, day
		year = parseInt(info.year, 10);
		month = parseInt(info.month, 10) - 1; // In javascript, january is 0, february 1, etc...
		day = parseInt(info.day, 10);
		// If no hour is given, return a date with day precision
		if (info.hour == null) {
			date = new Date(Date.UTC(year, month, day));
			return date;
		}
		// Extract hour, minute, second
		hour = parseInt(info.hour, 10);
		minute = parseInt(info.minute, 10);
		second = parseInt(info.second, 10);
		// Extract fraction, if given
		if (info.fraction != null) {
			fraction = info.fraction.slice(0, 3);
			while (fraction.length &lt; 3) {
				fraction += '0';
			}
			fraction = parseInt(fraction, 10);
		} else {
			fraction = 0;
		}
		// Compute timezone offset if given
		if (info.tz != null) {
			tz_hour = parseInt(info.tz_hour, 10);
			if (info.tz_minute != null) {
				tz_minute = parseInt(info.tz_minute, 10);
			} else {
				tz_minute = 0;
			}
			// Compute timezone delta in ms
			tz_offset = (tz_hour * 60 + tz_minute) * 60000;
			if ('-' === info.tz_sign) {
				tz_offset *= -1;
			}
		}
		// Compute date
		date = new Date(Date.UTC(year, month, day, hour, minute, second, fraction));
		if (tz_offset) {
			date.setTime(date.getTime() - tz_offset);
		}
		return date;
    },

    // Repeats the given string a number of times

    // @param [String]   str     The string to repeat
    // @param [Integer]  number  The number of times to repeat the string

    // @return [String]  The repeated string

    strRepeat: function(str, number) {
		var i, res;
		res = '';
		i = 0;
		while (i &lt; number) {
			res += str;
			i++;
		}
		return res;
    },

    // Reads the data from the given file path and returns the result as string

    // @param [String]   path        The path to the file
    // @param [Function] callback    A callback to read file asynchronously (optional)

    // @return [String]  The resulting data as string

    getStringFromFile: function(path, callback) {
		if(callback == undefined) {
			callback = null;
		}
		var data, fs, j, len1, name, ref, req, xhr;
		xhr = null;
		if (typeof window !== "undefined" &amp;&amp; window !== null) {
			if (window.XMLHttpRequest) {
				xhr = new XMLHttpRequest();
			} else if (window.ActiveXObject) {
				ref = ["Msxml2.XMLHTTP.6.0", "Msxml2.XMLHTTP.3.0", "Msxml2.XMLHTTP", "Microsoft.XMLHTTP"];
				for (j = 0, len1 = ref.length; j &lt; len1; j++) {
					name = ref[j];
					try {
						xhr = new ActiveXObject(name);
					} catch (error) {}
				}
			}
		}
		if (xhr != null) {
			// Browser
			if (callback != null) {
				// Async
				xhr.onreadystatechange = function() {
					if (xhr.readyState === 4) {
						if (xhr.status === 200 || xhr.status === 0) {
							return callback(xhr.responseText);
						} else {
							return callback(null);
						}
					}
				};
				xhr.open('GET', path, true);
				return xhr.send(null);
			} else {
				// Sync
				xhr.open('GET', path, false);
				xhr.send(null);
				if (xhr.status === 200 || xhr.status === 0) {
					return xhr.responseText;
				}
				return null;
			}
		} else {
			// Node.js-like
			req = require;
			fs = req('fs'); // Prevent browserify from trying to load 'fs' module
			if (callback != null) {
				// Async
				return fs.readFile(path, function(err, data) {
					if (err) {
						return callback(null);
					} else {
						return callback(String(data));
					}
				});
			} else {
				// Sync
				data = fs.readFileSync(path);
				if (data != null) {
					return String(data);
				}
				return null;
			}
		}
    },
	
    type: 'Utils'
};]]&gt;&lt;/script&gt;&lt;sys_class_name&gt;sys_script_include&lt;/sys_class_name&gt;&lt;sys_created_by&gt;jon&lt;/sys_created_by&gt;&lt;sys_created_on&gt;2020-08-30 19:06:34&lt;/sys_created_on&gt;&lt;sys_id&gt;02d8710c1b471854aed775561a4bcb6c&lt;/sys_id&gt;&lt;sys_mod_count&gt;8&lt;/sys_mod_count&gt;&lt;sys_name&gt;Utils&lt;/sys_name&gt;&lt;sys_package display_value="YAML JSON Conversion" source="x_radi_yaml_json"&gt;cbe7f1881b471854aed775561a4bcbc7&lt;/sys_package&gt;&lt;sys_policy&gt;read&lt;/sys_policy&gt;&lt;sys_scope display_value="YAML JSON Conversion"&gt;cbe7f1881b471854aed775561a4bcbc7&lt;/sys_scope&gt;&lt;sys_update_name&gt;sys_script_include_02d8710c1b471854aed775561a4bcb6c&lt;/sys_update_name&gt;&lt;sys_updated_by&gt;reese@rapdev.io&lt;/sys_updated_by&gt;&lt;sys_updated_on&gt;2021-05-05 18:05:38&lt;/sys_updated_on&gt;&lt;/sys_script_include&gt;&lt;/record_update&gt;</payload>
<payload_hash>2045641206</payload_hash>
<remote_update_set display_value="YAML JSON Conversion - 1.0.2">eccf469cdb103c102ed422e648961943</remote_update_set>
<replace_on_upgrade>false</replace_on_upgrade>
<sys_created_by>jon@rapdev.io</sys_created_by>
<sys_created_on>2021-05-19 14:54:11</sys_created_on>
<sys_id>eccf469cdb103c102ed422e648961946</sys_id>
<sys_mod_count>0</sys_mod_count>
<sys_recorded_at>179851e350b0000001</sys_recorded_at>
<sys_updated_by>jon@rapdev.io</sys_updated_by>
<sys_updated_on>2021-05-19 14:54:11</sys_updated_on>
<table/>
<target_name>Utils</target_name>
<type>Script Include</type>
<update_domain>global</update_domain>
<update_guid>ac553aff15ffa450efc2988ad57280a9</update_guid>
<update_guid_history>ac553aff15ffa450efc2988ad57280a9:2045641206,fbc4e107c5a7a8505bda48406f9e9555:1385730214,91fb75002e871854684adcd495bfb833:-52850238,53cb7500e9871854b00fa5a977edeb1d:-1347079812,97bbf100b7871854e359b61724706dc4:17266026,fcbb710058871854d6dd0b1a9a42164f:-1382221231,98ab71008c87185404963638f03f0a46:-349428712,dc9bfdccf14718545ac1014bf3e445f9:806858684,17f8750c76471854f84f18d33cff3489:-1634732047</update_guid_history>
<update_set display_value=""/>
<view/>
</sys_update_xml>
</unload>
